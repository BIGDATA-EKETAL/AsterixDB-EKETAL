/* Generated By:JavaCC: Do not edit this line. AQLParserTokenManager.java */
package org.apache.asterix.lang.aql.parser;
// For AQLParserTokenManager
import java.util.ArrayDeque;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.asterix.common.annotations.AutoDataGen;
import org.apache.asterix.common.annotations.DateBetweenYearsDataGen;
import org.apache.asterix.common.annotations.DatetimeAddRandHoursDataGen;
import org.apache.asterix.common.annotations.DatetimeBetweenYearsDataGen;
import org.apache.asterix.common.annotations.FieldIntervalDataGen;
import org.apache.asterix.common.annotations.FieldValFileDataGen;
import org.apache.asterix.common.annotations.FieldValFileSameIndexDataGen;
import org.apache.asterix.common.annotations.IRecordFieldDataGen;
import org.apache.asterix.common.annotations.InsertRandIntDataGen;
import org.apache.asterix.common.annotations.ListDataGen;
import org.apache.asterix.common.annotations.ListValFileDataGen;
import org.apache.asterix.common.annotations.SkipSecondaryIndexSearchExpressionAnnotation;
import org.apache.asterix.common.annotations.TypeDataGen;
import org.apache.asterix.common.annotations.UndeclaredFieldsDataGen;
import org.apache.asterix.common.config.DatasetConfig.DatasetType;
import org.apache.asterix.common.config.DatasetConfig.IndexType;
import org.apache.asterix.common.exceptions.CompilationException;
import org.apache.asterix.common.functions.FunctionSignature;
import org.apache.asterix.lang.aql.clause.DistinctClause;
import org.apache.asterix.lang.aql.clause.ForClause;
import org.apache.asterix.lang.aql.expression.FLWOGRExpression;
import org.apache.asterix.lang.aql.expression.UnionExpr;
import org.apache.asterix.lang.aql.util.RangeMapBuilder;
import org.apache.asterix.lang.aql.util.AQLFormatPrintUtil;
import org.apache.asterix.lang.common.base.Clause;
import org.apache.asterix.lang.common.base.Expression;
import org.apache.asterix.lang.common.base.ILangExpression;
import org.apache.asterix.lang.common.base.IParser;
import org.apache.asterix.lang.common.base.Literal;
import org.apache.asterix.lang.common.base.Statement;
import org.apache.asterix.lang.common.clause.GroupbyClause;
import org.apache.asterix.lang.common.clause.LetClause;
import org.apache.asterix.lang.common.clause.LimitClause;
import org.apache.asterix.lang.common.clause.OrderbyClause;
import org.apache.asterix.lang.common.clause.UpdateClause;
import org.apache.asterix.lang.common.clause.WhereClause;
import org.apache.asterix.lang.common.context.RootScopeFactory;
import org.apache.asterix.lang.common.context.Scope;
import org.apache.asterix.lang.common.expression.AbstractAccessor;
import org.apache.asterix.lang.common.expression.CallExpr;
import org.apache.asterix.lang.common.expression.FieldAccessor;
import org.apache.asterix.lang.common.expression.FieldBinding;
import org.apache.asterix.lang.common.expression.GbyVariableExpressionPair;
import org.apache.asterix.lang.common.expression.IfExpr;
import org.apache.asterix.lang.common.expression.IndexAccessor;
import org.apache.asterix.lang.common.expression.IndexedTypeExpression;
import org.apache.asterix.lang.common.expression.ListConstructor;
import org.apache.asterix.lang.common.expression.LiteralExpr;
import org.apache.asterix.lang.common.expression.OperatorExpr;
import org.apache.asterix.lang.common.expression.OrderedListTypeDefinition;
import org.apache.asterix.lang.common.expression.QuantifiedExpression;
import org.apache.asterix.lang.common.expression.RecordConstructor;
import org.apache.asterix.lang.common.expression.RecordTypeDefinition;
import org.apache.asterix.lang.common.expression.TypeExpression;
import org.apache.asterix.lang.common.expression.TypeReferenceExpression;
import org.apache.asterix.lang.common.expression.UnaryExpr;
import org.apache.asterix.lang.common.expression.UnorderedListTypeDefinition;
import org.apache.asterix.lang.common.expression.VariableExpr;
import org.apache.asterix.lang.common.literal.DoubleLiteral;
import org.apache.asterix.lang.common.literal.FalseLiteral;
import org.apache.asterix.lang.common.literal.FloatLiteral;
import org.apache.asterix.lang.common.literal.LongIntegerLiteral;
import org.apache.asterix.lang.common.literal.MissingLiteral;
import org.apache.asterix.lang.common.literal.NullLiteral;
import org.apache.asterix.lang.common.literal.StringLiteral;
import org.apache.asterix.lang.common.literal.TrueLiteral;
import org.apache.asterix.lang.common.parser.ScopeChecker;
import org.apache.asterix.lang.common.statement.CompactStatement;
import org.apache.asterix.lang.common.statement.ConnectFeedStatement;
import org.apache.asterix.lang.common.statement.CreateDataverseStatement;
import org.apache.asterix.lang.common.statement.CreateFeedPolicyStatement;
import org.apache.asterix.lang.common.statement.CreateFeedStatement;
import org.apache.asterix.lang.common.statement.StartFeedStatement;
import org.apache.asterix.lang.common.statement.StopFeedStatement;
import org.apache.asterix.lang.common.statement.CreateFunctionStatement;
import org.apache.asterix.lang.common.statement.CreateIndexStatement;
import org.apache.asterix.lang.common.statement.DatasetDecl;
import org.apache.asterix.lang.common.statement.DataverseDecl;
import org.apache.asterix.lang.common.statement.DataverseDropStatement;
import org.apache.asterix.lang.common.statement.DeleteStatement;
import org.apache.asterix.lang.common.statement.DisconnectFeedStatement;
import org.apache.asterix.lang.common.statement.DropDatasetStatement;
import org.apache.asterix.lang.common.statement.ExternalDetailsDecl;
import org.apache.asterix.lang.common.statement.FeedDropStatement;
import org.apache.asterix.lang.common.statement.FeedPolicyDropStatement;
import org.apache.asterix.lang.common.statement.FunctionDecl;
import org.apache.asterix.lang.common.statement.FunctionDropStatement;
import org.apache.asterix.lang.common.statement.IndexDropStatement;
import org.apache.asterix.lang.common.statement.InsertStatement;
import org.apache.asterix.lang.common.statement.InternalDetailsDecl;
import org.apache.asterix.lang.common.statement.LoadStatement;
import org.apache.asterix.lang.common.statement.NodeGroupDropStatement;
import org.apache.asterix.lang.common.statement.NodegroupDecl;
import org.apache.asterix.lang.common.statement.Query;
import org.apache.asterix.lang.common.statement.RefreshExternalDatasetStatement;
import org.apache.asterix.lang.common.statement.RunStatement;
import org.apache.asterix.lang.common.statement.SetStatement;
import org.apache.asterix.lang.common.statement.TypeDecl;
import org.apache.asterix.lang.common.statement.TypeDropStatement;
import org.apache.asterix.lang.common.statement.UpdateStatement;
import org.apache.asterix.lang.common.statement.UpsertStatement;
import org.apache.asterix.lang.common.statement.WriteStatement;
import org.apache.asterix.lang.common.struct.Identifier;
import org.apache.asterix.lang.common.struct.QuantifiedPair;
import org.apache.asterix.lang.common.struct.VarIdentifier;
import org.apache.asterix.metadata.utils.MetadataConstants;
import org.apache.hyracks.algebricks.common.utils.Pair;
import org.apache.hyracks.algebricks.common.utils.Triple;
import org.apache.hyracks.algebricks.core.algebra.expressions.IExpressionAnnotation;
import org.apache.hyracks.algebricks.core.algebra.expressions.IndexedNLJoinExpressionAnnotation;
import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;

/** Token Manager. */
public class AQLParserTokenManager implements AQLParserConstants
{
    public int commentDepth = 0;
    public ArrayDeque<Integer> lexerStateStack = new ArrayDeque<Integer>();

    public void pushState() {
      lexerStateStack.push( curLexState );
    }

    public void popState(String token) {
      if (lexerStateStack.size() > 0) {
         SwitchTo( lexerStateStack.pop() );
      } else {
         int errorLine = input_stream.getEndLine();
         int errorColumn = input_stream.getEndColumn();
         String msg = "Lexical error at line " + errorLine + ", column " + errorColumn + ". Encountered \u005c"" + token
             + "\u005c" but state stack is empty.";
         throw new TokenMgrError(msg, -1);
      }
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffffffffffcL) != 0L || (active1 & 0x3c06000013fffffL) != 0L)
         {
            jjmatchedKind = 138;
            return 26;
         }
         if ((active1 & 0x800000000L) != 0L)
            return 63;
         if ((active1 & 0x800000L) != 0L || (active2 & 0x40000L) != 0L)
            return 55;
         return -1;
      case 1:
         if ((active0 & 0x1401fc000000138L) != 0L || (active1 & 0x400000001000L) != 0L)
            return 26;
         if ((active0 & 0xfebfe03ffffffec4L) != 0L || (active1 & 0x3c02000013fefffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 138;
               jjmatchedPos = 1;
            }
            return 26;
         }
         return -1;
      case 2:
         if ((active0 & 0x1600180000010L) != 0L || (active1 & 0x200000020044L) != 0L)
            return 26;
         if ((active0 & 0xffbe9f3e7ffffec4L) != 0L || (active1 & 0x3c00000013defbbL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 138;
               jjmatchedPos = 2;
            }
            return 26;
         }
         return -1;
      case 3:
         if ((active0 & 0x484100221900000L) != 0L || (active1 & 0x180000001102b00L) != 0L)
            return 26;
         if ((active0 & 0xfb3acf3d5e6ffec4L) != 0L || (active1 & 0x2400000002dc4bbL) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 3;
            return 26;
         }
         return -1;
      case 4:
         if ((active0 & 0x10a013004020084L) != 0L || (active1 & 0x2000000002c4082L) != 0L)
            return 26;
         if ((active0 & 0xfa30ce0d5a6dfe40L) != 0L || (active1 & 0x40000000018439L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 4;
            return 26;
         }
         return -1;
      case 5:
         if ((active0 & 0x8a20040148082200L) != 0L || (active1 & 0x18021L) != 0L)
            return 26;
         if ((active0 & 0x7010ca0c1265dc40L) != 0L || (active1 & 0x40000000000418L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 138;
               jjmatchedPos = 5;
            }
            return 26;
         }
         return -1;
      case 6:
         if ((active0 & 0x6000c00000015c00L) != 0L || (active1 & 0x40000000000000L) != 0L)
            return 26;
         if ((active0 & 0x10100a0c12648040L) != 0L || (active1 & 0x419L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 138;
               jjmatchedPos = 6;
            }
            return 26;
         }
         return -1;
      case 7:
         if ((active0 & 0x80c12400000L) != 0L)
            return 26;
         if ((active0 & 0x1010020000248840L) != 0L || (active1 & 0x419L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 7;
            return 26;
         }
         return -1;
      case 8:
         if ((active0 & 0x1000000000240840L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 8;
            return 26;
         }
         if ((active0 & 0x10020000008000L) != 0L || (active1 & 0x419L) != 0L)
            return 26;
         return -1;
      case 9:
         if ((active0 & 0x1000000000240800L) != 0L)
            return 26;
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 9;
            return 26;
         }
         return -1;
      case 10:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 10;
            return 26;
         }
         return -1;
      case 11:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 11;
            return 26;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L, 0x0L);
      case 35:
         return jjStopAtPos(0, 112);
      case 37:
         return jjStopAtPos(0, 90);
      case 40:
         return jjStopAtPos(0, 93);
      case 41:
         return jjStopAtPos(0, 94);
      case 42:
         return jjStopAtPos(0, 91);
      case 43:
         return jjStopAtPos(0, 92);
      case 44:
         return jjStopAtPos(0, 98);
      case 45:
         return jjStopAtPos(0, 89);
      case 46:
         return jjStartNfaWithStates_0(0, 99, 63);
      case 47:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000L);
      case 58:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 1);
      case 60:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 105);
      case 62:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 100);
      case 64:
         return jjStopAtPos(0, 111);
      case 91:
         return jjStopAtPos(0, 95);
      case 93:
         return jjStopAtPos(0, 96);
      case 94:
         return jjStopAtPos(0, 86);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x7cL, 0x200000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x180L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3e00L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xffc000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1f000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0xfe0000000L, 0x200000000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1fc000000000L, 0x1000000L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0xe00000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x7000000000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x18000000000000L, 0x80000000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x3e0000000000000L, 0x400000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x3c00000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0x7L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f8L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000003c00L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7c000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x380000L, 0x0L);
      case 123:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 114);
      case 126:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L, 0x0L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(1, 146);
         break;
      case 61:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000c000L, active1, 0x200000000000008L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xc001e000201f0000L, active1, 0x471L, active2, 0L);
      case 102:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 26);
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80800L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2002040600000L, active1, 0x40000000100000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000200L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 54, 26);
         return jjMoveStringLiteralDfa2_0(active0, 0x1f0002000000L, active1, 0x200000004000L, active2, 0L);
      case 111:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 76, 26);
         return jjMoveStringLiteralDfa2_0(active0, 0x814000180001c00L, active1, 0x200L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000004L, active1, 0x18000L, active2, 0L);
      case 114:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3100001200802000L, active1, 0x100000000200000L, active2, 0L);
      case 115:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10L, active1, 0x60000L, active2, 0L);
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 5, 26);
         return jjMoveStringLiteralDfa2_0(active0, 0x80L, active1, 0x182L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000c00000040L, active1, 0x80000000000004L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 26);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 123:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 115);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x80L);
      case 99:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 4, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0x30000L, active1, 0x10L);
      case 100:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 109, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0x110010000000000L, active1, 0x8000L);
      case 101:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 81, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0x1080800024002000L, active1, 0x80800L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x4020000002040000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000008000000L, active1, 0x1244000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000440080000L, active1, 0x280000000000020L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000c00L, active1, 0x600L);
      case 110:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0x2800001000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1200800200L, active1, 0x100L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L, active1, 0x2000L);
      case 114:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000100000080L, active1, 0x2L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x40001700000L, active1, 0x40000000010000L);
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 26);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 70, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0x860018001000c040L, active1, 0x100009L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000000L);
      case 121:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000e000L, active1, 0x8000L);
      case 99:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0x800200000L, active1, 0L);
      case 100:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 26);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 26);
         break;
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 26);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 26);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 26);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 120, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0x1100f0010080080L, active1, 0x10022L);
      case 104:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 26);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 26);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x802000000040000L, active1, 0x8L);
      case 108:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 119, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0x400010004L, active1, 0L);
      case 109:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000100000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 26);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0x40000L);
      case 111:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0x2020040L, active1, 0x4010L);
      case 112:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 26);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0x200800000000c00L, active1, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000004000000L, active1, 0x80080L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000008000200L, active1, 0x240000000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x2040400000L, active1, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000001000000000L, active1, 0x1L);
      case 118:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 88, 26);
         break;
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000100010c00L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0x20L);
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 26);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 26);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 83, 26);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 26);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 121, 26);
         return jjMoveStringLiteralDfa5_0(active0, 0x4020000040001200L, active1, 0L);
      case 103:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 26);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000040L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000400000L, active1, 0x40000000000000L);
      case 109:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 26);
         break;
      case 110:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 78, 26);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000200000L, active1, 0x400L);
      case 112:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 26);
         break;
      case 114:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 26);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 26);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000c0012000000L, active1, 0x10001L);
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 26);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000020000004000L, active1, 0x8L);
      case 116:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 26);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 26);
         return jjMoveStringLiteralDfa5_0(active0, 0xc08082000L, active1, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0L);
      case 120:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 26);
         break;
      case 121:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 2, 26);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x2001c00L, active1, 0L);
      case 100:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 26);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 26);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 26);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 26);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000c040L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800040000L, active1, 0L);
      case 110:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x880010600000L, active1, 0x40000000000001L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 26);
         return jjMoveStringLiteralDfa6_0(active0, 0x2010400000010000L, active1, 0x400L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 26);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 26);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 26);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 26);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 26);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 26);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 26);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x80010000000L, active1, 0x410L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0L);
      case 100:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 26);
         break;
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 26);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L);
      case 103:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 26);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 118, 26);
         break;
      case 104:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 62, 26);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0x9L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x200040L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000800000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000008000L, active1, 0L);
      case 116:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 26);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 26);
         return jjMoveStringLiteralDfa7_0(active0, 0x40800L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L);
      case 121:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 61, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 26);
         break;
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x200040L, active1, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x40800L, active1, 0L);
      case 108:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 26);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 26);
         break;
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 26);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x410L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 22, 26);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 26);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L, active1, 0L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 15, 26);
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0L);
      case 103:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 64, 26);
         break;
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 41, 26);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x40800L, active1, 0L);
      case 112:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 52, 26);
         break;
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x40L, active1, 0L);
      case 115:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 67, 26);
         break;
      case 121:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 68, 26);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 74, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x40L);
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 60, 26);
         break;
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(9, 11, 26);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(9, 18, 26);
         break;
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 21, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(12, 6, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 63;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 55:
                  if (curChar == 47)
                  {
                     if (kind > 145)
                        kind = 145;
                     jjCheckNAddStates(0, 2);
                  }
                  if (curChar == 47)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 43);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(49, 50);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddStates(3, 12);
                  }
                  else if ((0x201000000000L & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                  }
                  else if (curChar == 47)
                     jjAddStates(13, 14);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(49, 53);
                  else if (curChar == 39)
                     jjCheckNAddStates(15, 17);
                  else if (curChar == 34)
                     jjCheckNAddStates(18, 20);
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 1:
               case 5:
                  if (curChar == 34)
                     jjCheckNAddStates(18, 20);
                  break;
               case 2:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 3:
                  if (curChar == 34 && kind > 128)
                     kind = 128;
                  break;
               case 7:
                  if (curChar == 47)
                     jjCheckNAddStates(18, 20);
                  break;
               case 13:
               case 17:
                  if (curChar == 39)
                     jjCheckNAddStates(15, 17);
                  break;
               case 14:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 15:
                  if (curChar == 39 && kind > 128)
                     kind = 128;
                  break;
               case 19:
                  if (curChar == 47)
                     jjCheckNAddStates(15, 17);
                  break;
               case 26:
                  if ((0x3ff201000000000L & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 27:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddStates(3, 12);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar == 46)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddTwoStates(34, 35);
                  break;
               case 36:
                  if (curChar == 45)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if (curChar == 45)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if (curChar == 46)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 43);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAdd(47);
                  break;
               case 48:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(49, 53);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddTwoStates(49, 50);
                  break;
               case 51:
                  if (curChar == 45)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(52);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 43);
                  break;
               case 54:
                  if (curChar == 47)
                     jjAddStates(13, 14);
                  break;
               case 56:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if (curChar == 10 && kind > 144)
                     kind = 144;
                  break;
               case 58:
                  if (curChar != 47)
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjCheckNAddStates(0, 2);
                  break;
               case 59:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjCheckNAddStates(0, 2);
                  break;
               case 60:
                  if ((0x2400L & l) != 0L && kind > 145)
                     kind = 145;
                  break;
               case 61:
                  if (curChar == 10 && kind > 145)
                     kind = 145;
                  break;
               case 62:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 138)
                        kind = 138;
                     jjCheckNAdd(26);
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 127)
                        kind = 127;
                  }
                  break;
               case 2:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 4:
                  if (curChar == 92)
                     jjAddStates(21, 28);
                  break;
               case 6:
                  if (curChar == 92)
                     jjCheckNAddStates(18, 20);
                  break;
               case 8:
                  if (curChar == 98)
                     jjCheckNAddStates(18, 20);
                  break;
               case 9:
                  if (curChar == 102)
                     jjCheckNAddStates(18, 20);
                  break;
               case 10:
                  if (curChar == 110)
                     jjCheckNAddStates(18, 20);
                  break;
               case 11:
                  if (curChar == 114)
                     jjCheckNAddStates(18, 20);
                  break;
               case 12:
                  if (curChar == 116)
                     jjCheckNAddStates(18, 20);
                  break;
               case 14:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 16:
                  if (curChar == 92)
                     jjAddStates(29, 36);
                  break;
               case 18:
                  if (curChar == 92)
                     jjCheckNAddStates(15, 17);
                  break;
               case 20:
                  if (curChar == 98)
                     jjCheckNAddStates(15, 17);
                  break;
               case 21:
                  if (curChar == 102)
                     jjCheckNAddStates(15, 17);
                  break;
               case 22:
                  if (curChar == 110)
                     jjCheckNAddStates(15, 17);
                  break;
               case 23:
                  if (curChar == 114)
                     jjCheckNAddStates(15, 17);
                  break;
               case 24:
                  if (curChar == 116)
                     jjCheckNAddStates(15, 17);
                  break;
               case 25:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  jjCheckNAdd(26);
                  break;
               case 28:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(29);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(39, 40);
                  break;
               case 43:
                  if ((0x4000000040L & l) != 0L && kind > 124)
                     kind = 124;
                  break;
               case 50:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(41, 42);
                  break;
               case 56:
                  jjAddStates(43, 44);
                  break;
               case 59:
                  if (kind > 145)
                     kind = 145;
                  jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(18, 20);
                  break;
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(15, 17);
                  break;
               case 56:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(43, 44);
                  break;
               case 59:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 63 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffffffffffcL) != 0L || (active1 & 0x3c06000013fffffL) != 0L)
         {
            jjmatchedKind = 138;
            return 26;
         }
         if ((active1 & 0x800000000L) != 0L)
            return 63;
         if ((active1 & 0x800000L) != 0L || (active2 & 0x40000L) != 0L)
            return 55;
         return -1;
      case 1:
         if ((active0 & 0x1401fc000000138L) != 0L || (active1 & 0x400000001000L) != 0L)
            return 26;
         if ((active0 & 0xfebfe03ffffffec4L) != 0L || (active1 & 0x3c02000013fefffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 138;
               jjmatchedPos = 1;
            }
            return 26;
         }
         return -1;
      case 2:
         if ((active0 & 0x1600180000010L) != 0L || (active1 & 0x200000020044L) != 0L)
            return 26;
         if ((active0 & 0xffbe9f3e7ffffec4L) != 0L || (active1 & 0x3c00000013defbbL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 138;
               jjmatchedPos = 2;
            }
            return 26;
         }
         return -1;
      case 3:
         if ((active0 & 0x484100221900000L) != 0L || (active1 & 0x180000001102b00L) != 0L)
            return 26;
         if ((active0 & 0xfb3acf3d5e6ffec4L) != 0L || (active1 & 0x2400000002dc4bbL) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 3;
            return 26;
         }
         return -1;
      case 4:
         if ((active0 & 0x10a013004020084L) != 0L || (active1 & 0x2000000002c4082L) != 0L)
            return 26;
         if ((active0 & 0xfa30ce0d5a6dfe40L) != 0L || (active1 & 0x40000000018439L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 4;
            return 26;
         }
         return -1;
      case 5:
         if ((active0 & 0x8a20040148082200L) != 0L || (active1 & 0x18021L) != 0L)
            return 26;
         if ((active0 & 0x7010ca0c1265dc40L) != 0L || (active1 & 0x40000000000418L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 138;
               jjmatchedPos = 5;
            }
            return 26;
         }
         return -1;
      case 6:
         if ((active0 & 0x6000c00000015c00L) != 0L || (active1 & 0x40000000000000L) != 0L)
            return 26;
         if ((active0 & 0x10100a0c12648040L) != 0L || (active1 & 0x419L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 138;
               jjmatchedPos = 6;
            }
            return 26;
         }
         return -1;
      case 7:
         if ((active0 & 0x80c12400000L) != 0L)
            return 26;
         if ((active0 & 0x1010020000248840L) != 0L || (active1 & 0x419L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 7;
            return 26;
         }
         return -1;
      case 8:
         if ((active0 & 0x1000000000240840L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 8;
            return 26;
         }
         if ((active0 & 0x10020000008000L) != 0L || (active1 & 0x419L) != 0L)
            return 26;
         return -1;
      case 9:
         if ((active0 & 0x1000000000240800L) != 0L)
            return 26;
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 9;
            return 26;
         }
         return -1;
      case 10:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 10;
            return 26;
         }
         return -1;
      case 11:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 11;
            return 26;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x40000000000L, 0x0L);
      case 35:
         return jjStopAtPos(0, 112);
      case 37:
         return jjStopAtPos(0, 90);
      case 40:
         return jjStopAtPos(0, 93);
      case 41:
         return jjStopAtPos(0, 94);
      case 42:
         return jjStopAtPos(0, 91);
      case 43:
         return jjStopAtPos(0, 92);
      case 44:
         return jjStopAtPos(0, 98);
      case 45:
         return jjStopAtPos(0, 89);
      case 46:
         return jjStartNfaWithStates_1(0, 99, 63);
      case 47:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x40000L);
      case 58:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x100000000000L, 0x0L);
      case 60:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x8000000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 105);
      case 62:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x10000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 100);
      case 64:
         return jjStopAtPos(0, 111);
      case 91:
         return jjStopAtPos(0, 95);
      case 93:
         return jjStopAtPos(0, 96);
      case 94:
         return jjStopAtPos(0, 86);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x7cL, 0x200000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_1(0x180L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0x3e00L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0xffc000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x1f000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0xfe0000000L, 0x200000000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_1(0x1000000000L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_1(0x2000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x1fc000000000L, 0x1000000L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_1(0xe00000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x7000000000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x40000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x18000000000000L, 0x80000000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_1(0x3e0000000000000L, 0x400000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x3c00000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0xc000000000000000L, 0x7L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x3f8L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x100000000003c00L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x7c000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x380000L, 0x0L);
      case 123:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x8000000000000L, 0x0L);
      case 125:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x10000000000000L, 0x0L);
      case 126:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x80000000000L, 0x0L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(1, 146);
         break;
      case 61:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000000000c000L, active1, 0x200000000000008L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0xc001e000201f0000L, active1, 0x471L, active2, 0L);
      case 102:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 38, 26);
         return jjMoveStringLiteralDfa2_1(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_1(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x80800L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x2002040600000L, active1, 0x40000000100000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000200L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 54, 26);
         return jjMoveStringLiteralDfa2_1(active0, 0x1f0002000000L, active1, 0x200000004000L, active2, 0L);
      case 111:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(1, 76, 26);
         return jjMoveStringLiteralDfa2_1(active0, 0x814000180001c00L, active1, 0x200L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000000000004L, active1, 0x18000L, active2, 0L);
      case 114:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x3100001200802000L, active1, 0x100000000200000L, active2, 0L);
      case 115:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x10L, active1, 0x60000L, active2, 0L);
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(1, 5, 26);
         return jjMoveStringLiteralDfa2_1(active0, 0x80L, active1, 0x182L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x200000c00000040L, active1, 0x80000000000004L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0x18000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(1, 8, 26);
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x2000L, active2, 0L);
      case 123:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 115);
         break;
      case 125:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 116);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000000000L, active1, 0x80L);
      case 99:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_1(2, 4, 26);
         return jjMoveStringLiteralDfa3_1(active0, 0x30000L, active1, 0x10L);
      case 100:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 109, 26);
         return jjMoveStringLiteralDfa3_1(active0, 0x110010000000000L, active1, 0x8000L);
      case 101:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(2, 81, 26);
         return jjMoveStringLiteralDfa3_1(active0, 0x1080800024002000L, active1, 0x80800L);
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x4020000002040000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000000008000000L, active1, 0x1244000L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x800000440080000L, active1, 0x280000000000020L);
      case 109:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000000000c00L, active1, 0x600L);
      case 110:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(2, 66, 26);
         return jjMoveStringLiteralDfa3_1(active0, 0x2800001000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x1200800200L, active1, 0x100L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x4L, active1, 0x2000L);
      case 114:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x8000100000080L, active1, 0x2L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x40001700000L, active1, 0x40000000010000L);
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 48, 26);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(2, 70, 26);
         return jjMoveStringLiteralDfa3_1(active0, 0x860018001000c040L, active1, 0x100009L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x100000000000000L);
      case 121:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x800000000e000L, active1, 0x8000L);
      case 99:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(3, 20, 26);
         return jjMoveStringLiteralDfa4_1(active0, 0x800200000L, active1, 0L);
      case 100:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(3, 29, 26);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 50, 26);
         break;
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(3, 24, 26);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(3, 73, 26);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(3, 77, 26);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 120, 26);
         return jjMoveStringLiteralDfa4_1(active0, 0x1100f0010080080L, active1, 0x10022L);
      case 104:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 58, 26);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(3, 84, 26);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x802000000040000L, active1, 0x8L);
      case 108:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 119, 26);
         return jjMoveStringLiteralDfa4_1(active0, 0x400010004L, active1, 0L);
      case 109:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(3, 33, 26);
         return jjMoveStringLiteralDfa4_1(active0, 0x2000000100000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 55, 26);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(3, 75, 26);
         return jjMoveStringLiteralDfa4_1(active0, 0x1000L, active1, 0x40000L);
      case 111:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 44, 26);
         return jjMoveStringLiteralDfa4_1(active0, 0x2020040L, active1, 0x4010L);
      case 112:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(3, 23, 26);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(3, 72, 26);
         return jjMoveStringLiteralDfa4_1(active0, 0x200800000000c00L, active1, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000000004000000L, active1, 0x80080L);
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x20000008000200L, active1, 0x240000000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x2040400000L, active1, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000001000000000L, active1, 0x1L);
      case 118:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(3, 88, 26);
         break;
      case 119:
         return jjMoveStringLiteralDfa4_1(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x2000000100010c00L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0x800000000000000L, active1, 0x20L);
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(4, 7, 26);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_1(4, 65, 26);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(4, 83, 26);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(4, 85, 26);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 121, 26);
         return jjMoveStringLiteralDfa5_1(active0, 0x4020000040001200L, active1, 0L);
      case 103:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(4, 82, 26);
         return jjMoveStringLiteralDfa5_1(active0, 0x10000000000040L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x800000400000L, active1, 0x40000000000000L);
      case 109:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 51, 26);
         break;
      case 110:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(4, 78, 26);
         return jjMoveStringLiteralDfa5_1(active0, 0x40000L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa5_1(active0, 0x400000200000L, active1, 0x400L);
      case 112:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 36, 26);
         break;
      case 114:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(4, 17, 26);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 56, 26);
         return jjMoveStringLiteralDfa5_1(active0, 0x80000c0012000000L, active1, 0x10001L);
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 37, 26);
         return jjMoveStringLiteralDfa5_1(active0, 0x1000020000004000L, active1, 0x8L);
      case 116:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 49, 26);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(4, 71, 26);
         return jjMoveStringLiteralDfa5_1(active0, 0xc08082000L, active1, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x200000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_1(active0, 0x8000L, active1, 0L);
      case 120:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 40, 26);
         break;
      case 121:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(4, 2, 26);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(4, 26, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_1(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_1(active0, 0x2001c00L, active1, 0L);
      case 100:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(5, 9, 26);
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x10L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(5, 13, 26);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(5, 19, 26);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(5, 79, 26);
         return jjMoveStringLiteralDfa6_1(active0, 0x40000c040L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x800040000L, active1, 0L);
      case 110:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0x880010600000L, active1, 0x40000000000001L);
      case 111:
         return jjMoveStringLiteralDfa6_1(active0, 0x1000000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(5, 30, 26);
         return jjMoveStringLiteralDfa6_1(active0, 0x2010400000010000L, active1, 0x400L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(5, 27, 26);
         return jjMoveStringLiteralDfa6_1(active0, 0x4000000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(5, 32, 26);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 42, 26);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 53, 26);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 57, 26);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(5, 69, 26);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(5, 80, 26);
         return jjMoveStringLiteralDfa6_1(active0, 0x20000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 59, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_1(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0x80010000000L, active1, 0x410L);
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0x400000L, active1, 0L);
      case 100:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 46, 26);
         break;
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(6, 16, 26);
         return jjMoveStringLiteralDfa7_1(active0, 0x2000000L, active1, 0L);
      case 103:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 47, 26);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 118, 26);
         break;
      case 104:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 62, 26);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_1(active0, 0x20000000000L, active1, 0x9L);
      case 110:
         return jjMoveStringLiteralDfa7_1(active0, 0x200040L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0x10000800000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_1(active0, 0x1000000000008000L, active1, 0L);
      case 116:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(6, 12, 26);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(6, 14, 26);
         return jjMoveStringLiteralDfa7_1(active0, 0x40800L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa7_1(active0, 0x400000000L, active1, 0L);
      case 121:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 61, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_1(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(7, 25, 26);
         break;
      case 101:
         return jjMoveStringLiteralDfa8_1(active0, 0x200040L, active1, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa8_1(active0, 0x40800L, active1, 0L);
      case 108:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(7, 28, 26);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 43, 26);
         break;
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(7, 35, 26);
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa8_1(active0, 0x20000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x410L);
      case 115:
         return jjMoveStringLiteralDfa8_1(active0, 0x8000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(7, 22, 26);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(7, 34, 26);
         return jjMoveStringLiteralDfa8_1(active0, 0x1000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_1(active0, 0x10000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_1(active0, 0x200000L, active1, 0L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(8, 15, 26);
         return jjMoveStringLiteralDfa9_1(active0, 0x1000000000000000L, active1, 0L);
      case 103:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_1(8, 64, 26);
         break;
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 41, 26);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_1(active0, 0x40800L, active1, 0L);
      case 112:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 52, 26);
         break;
      case 114:
         return jjMoveStringLiteralDfa9_1(active0, 0x40L, active1, 0L);
      case 115:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_1(8, 67, 26);
         break;
      case 121:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_1(8, 68, 26);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(8, 74, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_1(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_1(active0, 0x40L);
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(9, 60, 26);
         break;
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(9, 11, 26);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(9, 18, 26);
         break;
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(9, 21, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_1(8, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa11_1(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_1(9, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa12_1(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_1(10, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa12_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(10, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(12, 6, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_1(11, active0, 0L, 0L);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 63;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 55:
                  if (curChar == 47)
                  {
                     if (kind > 145)
                        kind = 145;
                     jjCheckNAddStates(0, 2);
                  }
                  if (curChar == 47)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 43);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(49, 50);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddStates(3, 12);
                  }
                  else if ((0x201000000000L & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                  }
                  else if (curChar == 47)
                     jjAddStates(13, 14);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(49, 53);
                  else if (curChar == 39)
                     jjCheckNAddStates(15, 17);
                  else if (curChar == 34)
                     jjCheckNAddStates(18, 20);
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 1:
               case 5:
                  if (curChar == 34)
                     jjCheckNAddStates(18, 20);
                  break;
               case 2:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 3:
                  if (curChar == 34 && kind > 128)
                     kind = 128;
                  break;
               case 7:
                  if (curChar == 47)
                     jjCheckNAddStates(18, 20);
                  break;
               case 13:
               case 17:
                  if (curChar == 39)
                     jjCheckNAddStates(15, 17);
                  break;
               case 14:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 15:
                  if (curChar == 39 && kind > 128)
                     kind = 128;
                  break;
               case 19:
                  if (curChar == 47)
                     jjCheckNAddStates(15, 17);
                  break;
               case 26:
                  if ((0x3ff201000000000L & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 27:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddStates(3, 12);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar == 46)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddTwoStates(34, 35);
                  break;
               case 36:
                  if (curChar == 45)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if (curChar == 45)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if (curChar == 46)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 43);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAdd(47);
                  break;
               case 48:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(49, 53);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddTwoStates(49, 50);
                  break;
               case 51:
                  if (curChar == 45)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(52);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 43);
                  break;
               case 54:
                  if (curChar == 47)
                     jjAddStates(13, 14);
                  break;
               case 56:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if (curChar == 10 && kind > 144)
                     kind = 144;
                  break;
               case 58:
                  if (curChar != 47)
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjCheckNAddStates(0, 2);
                  break;
               case 59:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjCheckNAddStates(0, 2);
                  break;
               case 60:
                  if ((0x2400L & l) != 0L && kind > 145)
                     kind = 145;
                  break;
               case 61:
                  if (curChar == 10 && kind > 145)
                     kind = 145;
                  break;
               case 62:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 138)
                        kind = 138;
                     jjCheckNAdd(26);
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 127)
                        kind = 127;
                  }
                  break;
               case 2:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 4:
                  if (curChar == 92)
                     jjAddStates(21, 28);
                  break;
               case 6:
                  if (curChar == 92)
                     jjCheckNAddStates(18, 20);
                  break;
               case 8:
                  if (curChar == 98)
                     jjCheckNAddStates(18, 20);
                  break;
               case 9:
                  if (curChar == 102)
                     jjCheckNAddStates(18, 20);
                  break;
               case 10:
                  if (curChar == 110)
                     jjCheckNAddStates(18, 20);
                  break;
               case 11:
                  if (curChar == 114)
                     jjCheckNAddStates(18, 20);
                  break;
               case 12:
                  if (curChar == 116)
                     jjCheckNAddStates(18, 20);
                  break;
               case 14:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 16:
                  if (curChar == 92)
                     jjAddStates(29, 36);
                  break;
               case 18:
                  if (curChar == 92)
                     jjCheckNAddStates(15, 17);
                  break;
               case 20:
                  if (curChar == 98)
                     jjCheckNAddStates(15, 17);
                  break;
               case 21:
                  if (curChar == 102)
                     jjCheckNAddStates(15, 17);
                  break;
               case 22:
                  if (curChar == 110)
                     jjCheckNAddStates(15, 17);
                  break;
               case 23:
                  if (curChar == 114)
                     jjCheckNAddStates(15, 17);
                  break;
               case 24:
                  if (curChar == 116)
                     jjCheckNAddStates(15, 17);
                  break;
               case 25:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  jjCheckNAdd(26);
                  break;
               case 28:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(29);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(39, 40);
                  break;
               case 43:
                  if ((0x4000000040L & l) != 0L && kind > 124)
                     kind = 124;
                  break;
               case 50:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(41, 42);
                  break;
               case 56:
                  jjAddStates(43, 44);
                  break;
               case 59:
                  if (kind > 145)
                     kind = 145;
                  jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(18, 20);
                  break;
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(15, 17);
                  break;
               case 56:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(43, 44);
                  break;
               case 59:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 63 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x200000L);
      case 47:
         return jjMoveStringLiteralDfa1_2(0x100000L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         break;
      case 47:
         if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, 0L, 0L, active2);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar != 43)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if (curChar != 32)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if ((0xfffffbffffffffffL & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  kind = 147;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   59, 60, 62, 31, 32, 33, 38, 39, 42, 43, 44, 45, 47, 55, 58, 14, 
   15, 16, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 18, 19, 
   20, 21, 22, 23, 24, 36, 37, 40, 41, 51, 52, 56, 57, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\73", "\141\160\160\154\171", "\141\163", "\141\163\143", "\141\164", 
"\141\165\164\157\147\145\156\145\162\141\164\145\144", "\142\164\162\145\145", "\142\171", "\143\154\157\163\145\144", 
"\143\157\155\160\141\143\164", "\143\157\155\160\141\143\164\151\157\156", "\143\157\156\156\145\143\164", 
"\143\162\145\141\164\145", "\144\141\164\141\163\145\164", "\144\141\164\141\166\145\162\163\145", 
"\144\145\143\154\141\162\145", "\144\145\143\157\162", "\144\145\146\151\156\151\164\151\157\156", 
"\144\145\154\145\164\145", "\144\145\163\143", "\144\151\163\143\157\156\156\145\143\164", 
"\144\151\163\164\151\156\143\164", "\144\162\157\160", "\145\154\163\145", "\145\156\146\157\162\143\145\144", 
"\145\166\145\162\171", "\145\170\151\163\164\163", "\145\170\164\145\162\156\141\154", 
"\146\145\145\144", "\146\151\154\164\145\162", "\146\157\162", "\146\157\162\155\141\164", 
"\146\162\157\155", "\146\165\154\154\164\145\170\164", "\146\165\156\143\164\151\157\156", 
"\147\162\157\165\160", "\150\151\156\164\163", "\151\146", "\151\156", "\151\156\144\145\170", 
"\151\156\147\145\163\164\151\157\156", "\151\156\163\145\162\164", "\151\156\164\145\162\156\141\154", 
"\151\156\164\157", "\153\145\171", "\153\145\171\167\157\162\144", 
"\153\145\145\160\151\156\147", "\154\145\164", "\154\151\155\151\164", "\154\157\141\144", 
"\156\147\162\141\155", "\156\157\144\145\147\162\157\165\160", "\157\146\146\163\145\164", 
"\157\156", "\157\160\145\156", "\157\162\144\145\162", "\157\165\164\160\165\164", 
"\160\141\164\150", "\160\157\154\151\143\171", "\160\162\145\55\163\157\162\164\145\144", 
"\160\162\151\155\141\162\171", "\162\145\146\162\145\163\150", "\162\145\164\165\162\156", 
"\162\145\164\165\162\156\151\156\147", "\162\164\162\145\145", "\162\165\156", 
"\163\141\164\151\163\146\151\145\163", "\163\145\143\157\156\144\141\162\171", "\163\145\154\145\143\164", 
"\163\145\164", "\163\164\141\162\164", "\163\164\157\160", "\163\157\155\145", 
"\164\145\155\160\157\162\141\162\171", "\164\150\145\156", "\164\157", "\164\171\160\145", "\165\156\151\157\156", 
"\165\160\144\141\164\145", "\165\160\163\145\162\164", "\165\163\145", "\165\163\151\156\147", 
"\167\150\145\162\145", "\167\151\164\150", "\167\162\151\164\145", "\136", "\57", "\151\144\151\166", 
"\55", "\45", "\52", "\53", "\50", "\51", "\133", "\135", "\72", "\54", "\56", "\77", 
"\74", "\76", "\74\75", "\76\75", "\75", "\41\75", "\176\75", "\72\75", 
"\141\156\144", "\157\162", "\100", "\43", "\173", "\175", "\173\173", "\175\175", null, 
"\155\151\163\163\151\156\147", "\156\165\154\154", "\164\162\165\145", "\146\141\154\163\145", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_DBL_BRACE",
   "INSIDE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 
   -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0xbbffffffffffffffL, 0xc01L, 
};
static final long[] jjtoSkip = {
   0x0L, 0x0L, 0x7ff000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x80000L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[63];
private final int[] jjstateSet = new int[126];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public AQLParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public AQLParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 63; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos == 0 && jjmatchedKind > 150)
       {
          jjmatchedKind = 150;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 146 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
             pushState();
         break;
      case 148 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
             pushState();
         break;
      case 149 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
             popState("*/");
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 113 :
        image.append(jjstrLiteralImages[113]);
        lengthOfMatch = jjstrLiteralImages[113].length();
                        pushState();
         break;
      case 114 :
        image.append(jjstrLiteralImages[114]);
        lengthOfMatch = jjstrLiteralImages[114].length();
                         popState("}");
         break;
      case 115 :
        image.append(jjstrLiteralImages[115]);
        lengthOfMatch = jjstrLiteralImages[115].length();
                            pushState();
         break;
      case 116 :
        image.append(jjstrLiteralImages[116]);
        lengthOfMatch = jjstrLiteralImages[116].length();
                             popState("}}");
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}

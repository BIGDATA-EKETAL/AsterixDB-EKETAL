/* Generated By:JavaCC: Do not edit this line. SQLPPParserTokenManager.java */
package org.apache.asterix.lang.sqlpp.parser;
// For SQL++ ParserTokenManager
import java.util.ArrayDeque;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.asterix.common.annotations.AutoDataGen;
import org.apache.asterix.common.annotations.DateBetweenYearsDataGen;
import org.apache.asterix.common.annotations.DatetimeAddRandHoursDataGen;
import org.apache.asterix.common.annotations.DatetimeBetweenYearsDataGen;
import org.apache.asterix.common.annotations.FieldIntervalDataGen;
import org.apache.asterix.common.annotations.FieldValFileDataGen;
import org.apache.asterix.common.annotations.FieldValFileSameIndexDataGen;
import org.apache.asterix.common.annotations.IRecordFieldDataGen;
import org.apache.asterix.common.annotations.InsertRandIntDataGen;
import org.apache.asterix.common.annotations.ListDataGen;
import org.apache.asterix.common.annotations.ListValFileDataGen;
import org.apache.asterix.common.annotations.SkipSecondaryIndexSearchExpressionAnnotation;
import org.apache.asterix.common.annotations.TypeDataGen;
import org.apache.asterix.common.annotations.UndeclaredFieldsDataGen;
import org.apache.asterix.common.config.DatasetConfig.DatasetType;
import org.apache.asterix.common.config.DatasetConfig.IndexType;
import org.apache.asterix.common.exceptions.CompilationException;
import org.apache.asterix.common.functions.FunctionSignature;
import org.apache.asterix.lang.common.base.Expression;
import org.apache.asterix.lang.common.base.Literal;
import org.apache.asterix.lang.common.base.IParser;
import org.apache.asterix.lang.common.base.Statement;
import org.apache.asterix.lang.common.clause.GroupbyClause;
import org.apache.asterix.lang.common.clause.LetClause;
import org.apache.asterix.lang.common.clause.LimitClause;
import org.apache.asterix.lang.common.clause.OrderbyClause;
import org.apache.asterix.lang.common.clause.UpdateClause;
import org.apache.asterix.lang.common.clause.WhereClause;
import org.apache.asterix.lang.common.context.RootScopeFactory;
import org.apache.asterix.lang.common.context.Scope;
import org.apache.asterix.lang.common.expression.AbstractAccessor;
import org.apache.asterix.lang.common.expression.CallExpr;
import org.apache.asterix.lang.common.expression.FieldAccessor;
import org.apache.asterix.lang.common.expression.FieldBinding;
import org.apache.asterix.lang.common.expression.GbyVariableExpressionPair;
import org.apache.asterix.lang.common.expression.IfExpr;
import org.apache.asterix.lang.common.expression.IndexAccessor;
import org.apache.asterix.lang.common.expression.IndexedTypeExpression;
import org.apache.asterix.lang.common.expression.ListConstructor;
import org.apache.asterix.lang.common.expression.LiteralExpr;
import org.apache.asterix.lang.common.expression.OperatorExpr;
import org.apache.asterix.lang.common.expression.OrderedListTypeDefinition;
import org.apache.asterix.lang.common.expression.QuantifiedExpression;
import org.apache.asterix.lang.common.expression.RecordConstructor;
import org.apache.asterix.lang.common.expression.RecordTypeDefinition;
import org.apache.asterix.lang.common.expression.TypeExpression;
import org.apache.asterix.lang.common.expression.TypeReferenceExpression;
import org.apache.asterix.lang.common.expression.UnaryExpr;
import org.apache.asterix.lang.common.expression.UnorderedListTypeDefinition;
import org.apache.asterix.lang.common.expression.VariableExpr;
import org.apache.asterix.lang.common.literal.DoubleLiteral;
import org.apache.asterix.lang.common.literal.FalseLiteral;
import org.apache.asterix.lang.common.literal.FloatLiteral;
import org.apache.asterix.lang.common.literal.LongIntegerLiteral;
import org.apache.asterix.lang.common.literal.MissingLiteral;
import org.apache.asterix.lang.common.literal.NullLiteral;
import org.apache.asterix.lang.common.literal.StringLiteral;
import org.apache.asterix.lang.common.literal.TrueLiteral;
import org.apache.asterix.lang.common.parser.ScopeChecker;
import org.apache.asterix.lang.common.statement.CompactStatement;
import org.apache.asterix.lang.common.statement.ConnectFeedStatement;
import org.apache.asterix.lang.common.statement.StartFeedStatement;
import org.apache.asterix.lang.common.statement.StopFeedStatement;
import org.apache.asterix.lang.common.statement.CreateDataverseStatement;
import org.apache.asterix.lang.common.statement.CreateFeedPolicyStatement;
import org.apache.asterix.lang.common.statement.CreateFeedStatement;
import org.apache.asterix.lang.common.statement.CreateFunctionStatement;
import org.apache.asterix.lang.common.statement.CreateIndexStatement;
import org.apache.asterix.lang.common.statement.DatasetDecl;
import org.apache.asterix.lang.common.statement.DataverseDecl;
import org.apache.asterix.lang.common.statement.DataverseDropStatement;
import org.apache.asterix.lang.common.statement.DeleteStatement;
import org.apache.asterix.lang.common.statement.DisconnectFeedStatement;
import org.apache.asterix.lang.common.statement.DropDatasetStatement;
import org.apache.asterix.lang.common.statement.ExternalDetailsDecl;
import org.apache.asterix.lang.common.statement.FeedDropStatement;
import org.apache.asterix.lang.common.statement.FeedPolicyDropStatement;
import org.apache.asterix.lang.common.statement.FunctionDecl;
import org.apache.asterix.lang.common.statement.FunctionDropStatement;
import org.apache.asterix.lang.common.statement.IndexDropStatement;
import org.apache.asterix.lang.common.statement.InsertStatement;
import org.apache.asterix.lang.common.statement.InternalDetailsDecl;
import org.apache.asterix.lang.common.statement.LoadStatement;
import org.apache.asterix.lang.common.statement.NodeGroupDropStatement;
import org.apache.asterix.lang.common.statement.NodegroupDecl;
import org.apache.asterix.lang.common.statement.Query;
import org.apache.asterix.lang.common.statement.RefreshExternalDatasetStatement;
import org.apache.asterix.lang.common.statement.RunStatement;
import org.apache.asterix.lang.common.statement.SetStatement;
import org.apache.asterix.lang.common.statement.TypeDecl;
import org.apache.asterix.lang.common.statement.TypeDropStatement;
import org.apache.asterix.lang.common.statement.UpdateStatement;
import org.apache.asterix.lang.common.statement.UpsertStatement;
import org.apache.asterix.lang.common.statement.WriteStatement;
import org.apache.asterix.lang.common.struct.Identifier;
import org.apache.asterix.lang.common.struct.QuantifiedPair;
import org.apache.asterix.lang.common.struct.VarIdentifier;
import org.apache.asterix.lang.sqlpp.clause.AbstractBinaryCorrelateClause;
import org.apache.asterix.lang.sqlpp.clause.FromClause;
import org.apache.asterix.lang.sqlpp.clause.FromTerm;
import org.apache.asterix.lang.sqlpp.clause.HavingClause;
import org.apache.asterix.lang.sqlpp.clause.JoinClause;
import org.apache.asterix.lang.sqlpp.clause.Projection;
import org.apache.asterix.lang.sqlpp.clause.SelectBlock;
import org.apache.asterix.lang.sqlpp.clause.SelectClause;
import org.apache.asterix.lang.sqlpp.clause.SelectElement;
import org.apache.asterix.lang.sqlpp.clause.SelectRegular;
import org.apache.asterix.lang.sqlpp.clause.SelectSetOperation;
import org.apache.asterix.lang.sqlpp.clause.UnnestClause;
import org.apache.asterix.lang.sqlpp.expression.CaseExpression;
import org.apache.asterix.lang.sqlpp.expression.SelectExpression;
import org.apache.asterix.lang.sqlpp.optype.JoinType;
import org.apache.asterix.lang.sqlpp.optype.SetOpType;
import org.apache.asterix.lang.sqlpp.struct.SetOperationInput;
import org.apache.asterix.lang.sqlpp.struct.SetOperationRight;
import org.apache.asterix.lang.sqlpp.util.ExpressionToVariableUtil;
import org.apache.asterix.lang.sqlpp.util.FunctionMapUtil;
import org.apache.asterix.lang.sqlpp.util.SqlppVariableUtil;
import org.apache.hyracks.algebricks.common.utils.Pair;
import org.apache.hyracks.algebricks.common.utils.Triple;
import org.apache.hyracks.algebricks.core.algebra.expressions.IExpressionAnnotation;
import org.apache.hyracks.algebricks.core.algebra.expressions.IndexedNLJoinExpressionAnnotation;
import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;

/** Token Manager. */
public class SQLPPParserTokenManager implements SQLPPParserConstants
{
    public int commentDepth = 0;
    public ArrayDeque<Integer> lexerStateStack = new ArrayDeque<Integer>();

    public void pushState() {
      lexerStateStack.push( curLexState );
    }

    public void popState(String token) {
      if (lexerStateStack.size() > 0) {
         SwitchTo( lexerStateStack.pop() );
      } else {
         int errorLine = input_stream.getEndLine();
         int errorColumn = input_stream.getEndColumn();
         String msg = "Lexical error at line " + errorLine + ", column " + errorColumn + ". Encountered \u005c"" + token
             + "\u005c" but state stack is empty.";
         throw new TokenMgrError(msg, -1);
      }
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 166;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 168;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 167;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 165;
         return jjMoveNfa_0(0, 0);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80L);
      case 35:
         jjmatchedKind = 129;
         return jjMoveNfa_0(0, 0);
      case 37:
         jjmatchedKind = 116;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 119;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 120;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 117;
         return jjMoveNfa_0(0, 0);
      case 43:
         jjmatchedKind = 118;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 125;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 115;
         return jjMoveNfa_0(0, 0);
      case 46:
         jjmatchedKind = 126;
         return jjMoveNfa_0(0, 0);
      case 47:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000000000L);
      case 58:
         jjmatchedKind = 124;
         return jjMoveNfa_0(0, 0);
      case 59:
         jjmatchedKind = 128;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 130;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x110L);
      case 61:
         jjmatchedKind = 134;
         return jjMoveNfa_0(0, 0);
      case 62:
         jjmatchedKind = 131;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20L);
      case 63:
         jjmatchedKind = 127;
         return jjMoveNfa_0(0, 0);
      case 64:
         jjmatchedKind = 123;
         return jjMoveNfa_0(0, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x1feL, 0x0L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0xe00L, 0x0L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x17f000L, 0x0L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x1fe80000L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x3fe0000000L, 0x0L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x3fc000000000L, 0x0L, 0x40000L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x1800000000000L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x7fe000000000000L, 0x0L, 0x0L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L, 0x0L);
      case 75:
         return jjMoveStringLiteralDfa1_0(0x3000000000000000L, 0x0L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0xfL, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x70L, 0x10000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f80L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3c000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfc0000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7f000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x780000000L, 0x20000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f800000000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x780000000000L, 0x0L);
      case 91:
         jjmatchedKind = 121;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 122;
         return jjMoveNfa_0(0, 0);
      case 94:
         jjmatchedKind = 111;
         return jjMoveNfa_0(0, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1feL, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0xe00L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x17f000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1fe80000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x3fe0000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3fc000000000L, 0x0L, 0x40000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x1800000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x7fe000000000000L, 0x4000000000000L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x3000000000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0xfL, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x70L, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f80L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3c000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfc0000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7f000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x780000000L, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f800000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x780000000000L, 0x0L);
      case 123:
         jjmatchedKind = 138;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000L, 0x0L);
      case 125:
         jjmatchedKind = 139;
         return jjMoveNfa_0(0, 0);
      case 126:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000281000L, active1, 0x40001044000L, active2, 0x40000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0xf000004003c00200L, active1, 0x8e380001L, active2, 0L);
      case 70:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x180100000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x100800c000000L, active1, 0x200000000006L, active2, 0x8000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x100a0002002L, active1, 0L, active2, 0L);
      case 78:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3f400030000000cL, active1, 0x3800000000L, active2, 0L);
      case 79:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800020000178000L, active1, 0x10008058L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x10L, active1, 0xc000000200L, active2, 0L);
      case 82:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x440010004000L, active1, 0x400000030800L, active2, 0x20000L);
      case 83:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0x30000000000L, active2, 0L);
      case 84:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0x60400000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x380000000100L, active1, 0x803000L, active2, 0x10000L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x3840000000L, active1, 0L, active2, 0L);
      case 89:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000281000L, active1, 0x40001044000L, active2, 0x40000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xf000004003c00200L, active1, 0x8e380001L, active2, 0L);
      case 102:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x180100000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x100800c000000L, active1, 0x200000000006L, active2, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100a0002002L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3f400030000000cL, active1, 0x3800000000L, active2, 0L);
      case 111:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800020000178000L, active1, 0x10008058L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x10L, active1, 0xc000000200L, active2, 0L);
      case 114:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x440010004000L, active1, 0x400000030800L, active2, 0x20000L);
      case 115:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0x30000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0x60400000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x380000000100L, active1, 0x803000L, active2, 0x10000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x3840000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 123:
         if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 1;
         }
         break;
      case 124:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x20000008L, active2, 0L);
      case 67:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800400000L, active1, 0x2000000L, active2, 0L);
      case 68:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x4000000810L, active2, 0L);
      case 69:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4420004000L, active1, 0x180100010200L, active2, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000100800000L, active1, 0x80080L, active2, 0L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x800001000000000L, active1, 0x420800020000L, active2, 0L);
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000002L, active2, 0L);
      case 76:
         if ((active0 & 0x2L) != 0L)
         {
            jjmatchedKind = 1;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x188001100000L, active1, 0x40004008000L, active2, 0x50000L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000L, active1, 0x90000004L, active2, 0L);
      case 78:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x41200000020000L, active1, 0x2000000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x440010002000L, active1, 0x40000000L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000010L, active1, 0x200000000L, active2, 0L);
      case 82:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40400L, active1, 0x400020L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000008e001000L, active1, 0x8000000000L, active2, 0x8000L);
      case 84:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8304002000280300L, active1, 0x200001307000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 87:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 2;
         }
         break;
      case 89:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x20000008L, active2, 0L);
      case 99:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800400000L, active1, 0x2000000L, active2, 0L);
      case 100:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x4000000810L, active2, 0L);
      case 101:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4420004000L, active1, 0x180100010200L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000100800000L, active1, 0x80080L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800001000000000L, active1, 0x4420800020000L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000002L, active2, 0L);
      case 108:
         if ((active0 & 0x2L) != 0L)
         {
            jjmatchedKind = 1;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x188001100000L, active1, 0x40004008000L, active2, 0x50000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000L, active1, 0x90000004L, active2, 0L);
      case 110:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x41200000020000L, active1, 0x2000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x440010002000L, active1, 0x40000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000010L, active1, 0x200000000L, active2, 0L);
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40400L, active1, 0x400020L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000008e001000L, active1, 0x8000000000L, active2, 0x8000L);
      case 116:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8304002000280300L, active1, 0x200001307000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 119:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 2;
         }
         break;
      case 121:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x284000L, active1, 0x4000000020L, active2, 0L);
      case 67:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200004000000L, active1, 0L, active2, 0L);
      case 68:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
         }
         break;
      case 69:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x3f0002801000400L, active1, 0xa004401810L, active2, 0L);
      case 72:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 3;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000800000L, active1, 0x1008004L, active2, 0L);
      case 76:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100040500010L, active1, 0L, active2, 0L);
      case 77:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0x20000L, active2, 0L);
      case 78:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0x21000000000L, active2, 0L);
      case 79:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000100L, active1, 0x802000000L, active2, 0L);
      case 80:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x18000L, active1, 0x80002000L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x400040000L, active1, 0x100020080000L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000002000L, active1, 0x80L, active2, 0x48000L);
      case 84:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8001018008000000L, active1, 0x400000000000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0x40000300000L, active2, 0L);
      case 87:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000200L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x284000L, active1, 0x4000000020L, active2, 0L);
      case 99:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200004000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
         }
         break;
      case 101:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x3f0002801000400L, active1, 0xa004401810L, active2, 0L);
      case 104:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 3;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000800000L, active1, 0x1008004L, active2, 0L);
      case 108:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100040500010L, active1, 0L, active2, 0L);
      case 109:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0x20000L, active2, 0L);
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0x21000000000L, active2, 0L);
      case 111:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000100L, active1, 0x802000000L, active2, 0L);
      case 112:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x18000L, active1, 0x80002000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x400040000L, active1, 0x100020080000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000002000L, active1, 0x80L, active2, 0x48000L);
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8001018008000000L, active1, 0x400000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0x40000300000L, active2, 0L);
      case 118:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 3;
         }
         break;
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000200L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x40418000L, active1, 0x20000L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4008000L, active2, 0L);
      case 69:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8020162200L, active1, 0x80080L, active2, 0L);
      case 71:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x100L, active1, 0x10L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000008000000L, active1, 0L, active2, 0x8000L);
      case 77:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 4;
         }
         break;
      case 78:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800000800000L, active1, 0x2000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000004000000L, active1, 0x1080000000L, active2, 0L);
      case 80:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 82:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x380002100000000L, active1, 0x8000300000L, active2, 0L);
      case 83:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000080000L, active1, 0x2001010000L, active2, 0L);
      case 84:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x311001004000L, active1, 0x4000000000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 88:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
         }
         break;
      case 89:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40418000L, active1, 0x20000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4008000L, active2, 0L);
      case 101:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8020162200L, active1, 0x80080L, active2, 0L);
      case 103:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x100L, active1, 0x10L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000008000000L, active1, 0L, active2, 0x8000L);
      case 109:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 4;
         }
         break;
      case 110:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800000800000L, active1, 0x2000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000004000000L, active1, 0x1080000000L, active2, 0L);
      case 112:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x380002100000000L, active1, 0x8000300000L, active2, 0L);
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000080000L, active1, 0x2001010000L, active2, 0L);
      case 116:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x311001004000L, active1, 0x4000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 120:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
         }
         break;
      case 121:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x100138000L, active1, 0L, active2, 0L);
      case 68:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 69:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x110000280300L, active1, 0L, active2, 0L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 71:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 5;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x200040800000L, active1, 0L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L, active1, 0L, active2, 0L);
      case 78:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x810000202c000000L, active1, 0x200000L, active2, 0x8000L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 82:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000400000L, active1, 0x80020010L, active2, 0L);
      case 83:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0x80000L, active2, 0L);
      case 84:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 87:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 89:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 5;
         }
         break;
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x100138000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x110000280300L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 103:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 5;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x200040800000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L, active1, 0L, active2, 0L);
      case 110:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x810000202c000000L, active1, 0x200000L, active2, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000400000L, active1, 0x80020010L, active2, 0L);
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0x80000L, active2, 0L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 121:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x100002000040000L, active1, 0x82000000L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 68:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 6;
         }
         break;
      case 69:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x200000100000000L, active1, 0L, active2, 0L);
      case 71:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 6;
         }
         break;
      case 72:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 6;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0x1200000L, active2, 0L);
      case 78:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4000100L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0x10L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L, active1, 0x10000L, active2, 0L);
      case 84:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x908000L, active1, 0L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 89:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x100002000040000L, active1, 0x82000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 6;
         }
         break;
      case 101:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x200000100000000L, active1, 0L, active2, 0L);
      case 103:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 6;
         }
         break;
      case 104:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 6;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0x1200000L, active2, 0L);
      case 110:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4000100L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0x10L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L, active1, 0x10000L, active2, 0L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x908000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0L);
      case 68:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 7;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000100L, active1, 0x1000000L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x908000L, active1, 0L);
      case 76:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 7;
         }
         break;
      case 78:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x82000000L);
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L, active1, 0L);
      case 84:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L, active1, 0x10000L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 7;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000100L, active1, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x908000L, active1, 0L);
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 7;
         }
         break;
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x82000000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L, active1, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L, active1, 0L);
      case 69:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000L);
      case 71:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 8;
         }
         break;
      case 78:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 8;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x908000L, active1, 0L);
      case 80:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 8;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x100L, active1, 0L);
      case 83:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 8;
         }
         break;
      case 84:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 8;
         }
         break;
      case 89:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 8;
         }
         break;
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L, active1, 0L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000L);
      case 103:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 8;
         }
         break;
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 8;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x908000L, active1, 0L);
      case 112:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 8;
         }
         break;
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x100L, active1, 0L);
      case 115:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 8;
         }
         break;
      case 116:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 8;
         }
         break;
      case 121:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 8;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x100L, active1, 0L);
      case 68:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 9;
         }
         break;
      case 78:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 9;
         }
         break;
      case 84:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 9;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x100L, active1, 0L);
      case 100:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 9;
         }
         break;
      case 110:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 9;
         }
         break;
      case 116:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 9;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x100L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x100L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x100L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 12;
         }
         break;
      case 100:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 12;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 88;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(0, 9);
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAddStates(10, 14);
                  }
                  else if (curChar == 45)
                     jjAddStates(15, 16);
                  else if (curChar == 47)
                     jjAddStates(17, 18);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(58, 62);
                  else if (curChar == 39)
                     jjCheckNAddStates(19, 21);
                  else if (curChar == 34)
                     jjCheckNAddStates(22, 24);
                  else if (curChar == 36)
                  {
                     if (kind > 152)
                        kind = 152;
                  }
                  break;
               case 2:
                  jjCheckNAddStates(25, 27);
                  break;
               case 5:
                  if (curChar == 34)
                     jjCheckNAddStates(25, 27);
                  break;
               case 7:
                  if (curChar == 47)
                     jjCheckNAddStates(25, 27);
                  break;
               case 13:
               case 17:
                  if (curChar == 34)
                     jjCheckNAddStates(22, 24);
                  break;
               case 14:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 15:
                  if (curChar == 34 && kind > 154)
                     kind = 154;
                  break;
               case 19:
                  if (curChar == 47)
                     jjCheckNAddStates(22, 24);
                  break;
               case 25:
               case 29:
                  if (curChar == 39)
                     jjCheckNAddStates(19, 21);
                  break;
               case 26:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 27:
                  if (curChar == 39 && kind > 154)
                     kind = 154;
                  break;
               case 31:
                  if (curChar == 47)
                     jjCheckNAddStates(19, 21);
                  break;
               case 38:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAddStates(0, 9);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar == 46)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 45:
                  if (curChar == 45)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAdd(46);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if (curChar == 45)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if (curChar == 46)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 52);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  jjCheckNAdd(56);
                  break;
               case 57:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(58, 62);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAddTwoStates(58, 59);
                  break;
               case 60:
                  if (curChar == 45)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAdd(61);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(62, 52);
                  break;
               case 63:
                  if (curChar == 47)
                     jjAddStates(17, 18);
                  break;
               case 64:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 65:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 66:
                  if (curChar == 10 && kind > 169)
                     kind = 169;
                  break;
               case 67:
                  if (curChar != 47)
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjCheckNAddStates(28, 30);
                  break;
               case 68:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjCheckNAddStates(28, 30);
                  break;
               case 69:
                  if ((0x2400L & l) != 0L && kind > 170)
                     kind = 170;
                  break;
               case 70:
                  if (curChar == 10 && kind > 170)
                     kind = 170;
                  break;
               case 71:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 45)
                     jjAddStates(15, 16);
                  break;
               case 73:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(74, 75);
                  break;
               case 74:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(74, 75);
                  break;
               case 75:
                  if (curChar == 10 && kind > 171)
                     kind = 171;
                  break;
               case 76:
                  if (curChar != 45)
                     break;
                  if (kind > 172)
                     kind = 172;
                  jjCheckNAddStates(31, 33);
                  break;
               case 77:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  jjCheckNAddStates(31, 33);
                  break;
               case 78:
                  if ((0x2400L & l) != 0L && kind > 172)
                     kind = 172;
                  break;
               case 79:
                  if (curChar == 10 && kind > 172)
                     kind = 172;
                  break;
               case 80:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar != 35)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAddStates(10, 14);
                  break;
               case 82:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 83:
                  if (curChar == 10 && kind > 173)
                     kind = 173;
                  break;
               case 84:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAddStates(34, 36);
                  break;
               case 85:
                  if ((0x2400L & l) != 0L && kind > 174)
                     kind = 174;
                  break;
               case 86:
                  if (curChar == 10 && kind > 174)
                     kind = 174;
                  break;
               case 87:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(38);
                  }
                  else if (curChar == 96)
                     jjCheckNAddStates(25, 27);
                  else if (curChar == 95)
                  {
                     if (kind > 152)
                        kind = 152;
                  }
                  break;
               case 1:
                  if (curChar == 96)
                     jjCheckNAddStates(25, 27);
                  break;
               case 2:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 3:
                  if (curChar == 96 && kind > 153)
                     kind = 153;
                  break;
               case 4:
                  if (curChar == 92)
                     jjAddStates(37, 44);
                  break;
               case 6:
                  if (curChar == 92)
                     jjCheckNAddStates(25, 27);
                  break;
               case 8:
                  if (curChar == 98)
                     jjCheckNAddStates(25, 27);
                  break;
               case 9:
                  if (curChar == 102)
                     jjCheckNAddStates(25, 27);
                  break;
               case 10:
                  if (curChar == 110)
                     jjCheckNAddStates(25, 27);
                  break;
               case 11:
                  if (curChar == 114)
                     jjCheckNAddStates(25, 27);
                  break;
               case 12:
                  if (curChar == 116)
                     jjCheckNAddStates(25, 27);
                  break;
               case 14:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 16:
                  if (curChar == 92)
                     jjAddStates(45, 52);
                  break;
               case 18:
                  if (curChar == 92)
                     jjCheckNAddStates(22, 24);
                  break;
               case 20:
                  if (curChar == 98)
                     jjCheckNAddStates(22, 24);
                  break;
               case 21:
                  if (curChar == 102)
                     jjCheckNAddStates(22, 24);
                  break;
               case 22:
                  if (curChar == 110)
                     jjCheckNAddStates(22, 24);
                  break;
               case 23:
                  if (curChar == 114)
                     jjCheckNAddStates(22, 24);
                  break;
               case 24:
                  if (curChar == 116)
                     jjCheckNAddStates(22, 24);
                  break;
               case 26:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 28:
                  if (curChar == 92)
                     jjAddStates(53, 60);
                  break;
               case 30:
                  if (curChar == 92)
                     jjCheckNAddStates(19, 21);
                  break;
               case 32:
                  if (curChar == 98)
                     jjCheckNAddStates(19, 21);
                  break;
               case 33:
                  if (curChar == 102)
                     jjCheckNAddStates(19, 21);
                  break;
               case 34:
                  if (curChar == 110)
                     jjCheckNAddStates(19, 21);
                  break;
               case 35:
                  if (curChar == 114)
                     jjCheckNAddStates(19, 21);
                  break;
               case 36:
                  if (curChar == 116)
                     jjCheckNAddStates(19, 21);
                  break;
               case 37:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAdd(38);
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(61, 62);
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(63, 64);
                  break;
               case 52:
                  if ((0x4000000040L & l) != 0L && kind > 149)
                     kind = 149;
                  break;
               case 59:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(65, 66);
                  break;
               case 65:
                  jjAddStates(67, 68);
                  break;
               case 68:
                  if (kind > 170)
                     kind = 170;
                  jjAddStates(28, 30);
                  break;
               case 74:
                  jjAddStates(69, 70);
                  break;
               case 77:
                  if (kind > 172)
                     kind = 172;
                  jjAddStates(31, 33);
                  break;
               case 82:
                  jjAddStates(71, 72);
                  break;
               case 84:
                  if (kind > 174)
                     kind = 174;
                  jjAddStates(34, 36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(25, 27);
                  break;
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(22, 24);
                  break;
               case 26:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(19, 21);
                  break;
               case 65:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(67, 68);
                  break;
               case 68:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjAddStates(28, 30);
                  break;
               case 74:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(69, 70);
                  break;
               case 77:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 172)
                     kind = 172;
                  jjAddStates(31, 33);
                  break;
               case 82:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(71, 72);
                  break;
               case 84:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjAddStates(34, 36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 88 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 166;
         return jjMoveNfa_1(0, 0);
      case 10:
         jjmatchedKind = 168;
         return jjMoveNfa_1(0, 0);
      case 13:
         jjmatchedKind = 167;
         return jjMoveNfa_1(0, 0);
      case 32:
         jjmatchedKind = 165;
         return jjMoveNfa_1(0, 0);
      case 33:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x80L);
      case 35:
         jjmatchedKind = 129;
         return jjMoveNfa_1(0, 0);
      case 37:
         jjmatchedKind = 116;
         return jjMoveNfa_1(0, 0);
      case 40:
         jjmatchedKind = 119;
         return jjMoveNfa_1(0, 0);
      case 41:
         jjmatchedKind = 120;
         return jjMoveNfa_1(0, 0);
      case 42:
         jjmatchedKind = 117;
         return jjMoveNfa_1(0, 0);
      case 43:
         jjmatchedKind = 118;
         return jjMoveNfa_1(0, 0);
      case 44:
         jjmatchedKind = 125;
         return jjMoveNfa_1(0, 0);
      case 45:
         jjmatchedKind = 115;
         return jjMoveNfa_1(0, 0);
      case 46:
         jjmatchedKind = 126;
         return jjMoveNfa_1(0, 0);
      case 47:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x800000000000L);
      case 58:
         jjmatchedKind = 124;
         return jjMoveNfa_1(0, 0);
      case 59:
         jjmatchedKind = 128;
         return jjMoveNfa_1(0, 0);
      case 60:
         jjmatchedKind = 130;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x110L);
      case 61:
         jjmatchedKind = 134;
         return jjMoveNfa_1(0, 0);
      case 62:
         jjmatchedKind = 131;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x20L);
      case 63:
         jjmatchedKind = 127;
         return jjMoveNfa_1(0, 0);
      case 64:
         jjmatchedKind = 123;
         return jjMoveNfa_1(0, 0);
      case 65:
         return jjMoveStringLiteralDfa1_1(0x1feL, 0x0L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_1(0xe00L, 0x0L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_1(0x17f000L, 0x0L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_1(0x1fe80000L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_1(0x3fe0000000L, 0x0L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_1(0x3fc000000000L, 0x0L, 0x40000L);
      case 71:
         return jjMoveStringLiteralDfa1_1(0x400000000000L, 0x0L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_1(0x1800000000000L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_1(0x7fe000000000000L, 0x0L, 0x0L);
      case 74:
         return jjMoveStringLiteralDfa1_1(0x800000000000000L, 0x0L, 0x0L);
      case 75:
         return jjMoveStringLiteralDfa1_1(0x3000000000000000L, 0x0L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_1(0xc000000000000000L, 0xfL, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x8000L);
      case 78:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x70L, 0x10000L);
      case 79:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x3f80L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x3c000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_1(0x0L, 0xfc0000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x7f000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x780000000L, 0x20000L);
      case 85:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x3f800000000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x40000000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x780000000000L, 0x0L);
      case 91:
         jjmatchedKind = 121;
         return jjMoveNfa_1(0, 0);
      case 93:
         jjmatchedKind = 122;
         return jjMoveNfa_1(0, 0);
      case 94:
         jjmatchedKind = 111;
         return jjMoveNfa_1(0, 0);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x1feL, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_1(0xe00L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0x17f000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x1fe80000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x3fe0000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x3fc000000000L, 0x0L, 0x40000L);
      case 103:
         return jjMoveStringLiteralDfa1_1(0x400000000000L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_1(0x1800000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x7fe000000000000L, 0x4000000000000L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_1(0x800000000000000L, 0x0L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_1(0x3000000000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0xc000000000000000L, 0xfL, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x70L, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x3f80L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x3c000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x0L, 0xfc0000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x7f000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x780000000L, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x3f800000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x40000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x780000000000L, 0x0L);
      case 123:
         jjmatchedKind = 138;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x1000L);
      case 124:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1000000000000L, 0x0L);
      case 125:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x2000L);
      case 126:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x200L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(0, 0);
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_1(active0, 0x800000281000L, active1, 0x40001044000L, active2, 0x40000L);
      case 69:
         return jjMoveStringLiteralDfa2_1(active0, 0xf000004003c00200L, active1, 0x8e380001L, active2, 0L);
      case 70:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x80L, active2, 0L);
      case 71:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x20L, active2, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x180100000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_1(active0, 0x100800c000000L, active1, 0x200000000006L, active2, 0x8000L);
      case 76:
         return jjMoveStringLiteralDfa2_1(active0, 0x100a0002002L, active1, 0L, active2, 0L);
      case 78:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x3f400030000000cL, active1, 0x3800000000L, active2, 0L);
      case 79:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x800020000178000L, active1, 0x10008058L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_1(active0, 0x10L, active1, 0xc000000200L, active2, 0L);
      case 82:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x440010004000L, active1, 0x400000030800L, active2, 0x20000L);
      case 83:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x40L, active1, 0x30000000000L, active2, 0L);
      case 84:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x400L, active1, 0x60400000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_1(active0, 0x380000000100L, active1, 0x803000L, active2, 0x10000L);
      case 86:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_1(active0, 0x3840000000L, active1, 0L, active2, 0L);
      case 89:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x800000281000L, active1, 0x40001044000L, active2, 0x40000L);
      case 100:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0xf000004003c00200L, active1, 0x8e380001L, active2, 0L);
      case 102:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x80L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x20L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x180100000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x100800c000000L, active1, 0x200000000006L, active2, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x100a0002002L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x3f400030000000cL, active1, 0x3800000000L, active2, 0L);
      case 111:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x800020000178000L, active1, 0x10008058L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_1(active0, 0x10L, active1, 0xc000000200L, active2, 0L);
      case 114:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x440010004000L, active1, 0x400000030800L, active2, 0x20000L);
      case 115:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x40L, active1, 0x30000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x400L, active1, 0x60400000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x380000000100L, active1, 0x803000L, active2, 0x10000L);
      case 118:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0x3840000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 123:
         if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 1;
         }
         break;
      case 124:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 1;
         }
         break;
      case 125:
         if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_1(0, 1);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_1(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(0, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000000L, active1, 0x20000008L, active2, 0L);
      case 67:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x800400000L, active1, 0x2000000L, active2, 0L);
      case 68:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000000000L, active1, 0x4000000810L, active2, 0L);
      case 69:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x4420004000L, active1, 0x180100010200L, active2, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000100800000L, active1, 0x80080L, active2, 0L);
      case 71:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_1(active0, 0x800001000000000L, active1, 0x420800020000L, active2, 0L);
      case 75:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x1000000002L, active2, 0L);
      case 76:
         if ((active0 & 0x2L) != 0L)
         {
            jjmatchedKind = 1;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x188001100000L, active1, 0x40004008000L, active2, 0x50000L);
      case 77:
         return jjMoveStringLiteralDfa3_1(active0, 0x18000L, active1, 0x90000004L, active2, 0L);
      case 78:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x41200000020000L, active1, 0x2000000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_1(active0, 0x440010002000L, active1, 0x40000000L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000010L, active1, 0x200000000L, active2, 0L);
      case 82:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x40400L, active1, 0x400020L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000008e001000L, active1, 0x8000000000L, active2, 0x8000L);
      case 84:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x8304002000280300L, active1, 0x200001307000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x20000L);
      case 86:
         return jjMoveStringLiteralDfa3_1(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 87:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 2;
         }
         break;
      case 89:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000000L, active1, 0x20000008L, active2, 0L);
      case 99:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x800400000L, active1, 0x2000000L, active2, 0L);
      case 100:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000000000L, active1, 0x4000000810L, active2, 0L);
      case 101:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x4420004000L, active1, 0x180100010200L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000100800000L, active1, 0x80080L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x800001000000000L, active1, 0x4420800020000L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x1000000002L, active2, 0L);
      case 108:
         if ((active0 & 0x2L) != 0L)
         {
            jjmatchedKind = 1;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x188001100000L, active1, 0x40004008000L, active2, 0x50000L);
      case 109:
         return jjMoveStringLiteralDfa3_1(active0, 0x18000L, active1, 0x90000004L, active2, 0L);
      case 110:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x41200000020000L, active1, 0x2000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x440010002000L, active1, 0x40000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000010L, active1, 0x200000000L, active2, 0L);
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x40400L, active1, 0x400020L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000008e001000L, active1, 0x8000000000L, active2, 0x8000L);
      case 116:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x8304002000280300L, active1, 0x200001307000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x20000L);
      case 118:
         return jjMoveStringLiteralDfa3_1(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 119:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 2;
         }
         break;
      case 121:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_1(0, 2);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_1(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(0, 2);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x10000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa4_1(active0, 0x284000L, active1, 0x4000000020L, active2, 0L);
      case 67:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x200004000000L, active1, 0L, active2, 0L);
      case 68:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
         }
         break;
      case 69:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x3f0002801000400L, active1, 0xa004401810L, active2, 0L);
      case 72:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 3;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa4_1(active0, 0x800000800000L, active1, 0x1008004L, active2, 0L);
      case 76:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x100040500010L, active1, 0L, active2, 0L);
      case 77:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x20000000L, active1, 0x20000L, active2, 0L);
      case 78:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x20000L, active1, 0x21000000000L, active2, 0L);
      case 79:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x100000100L, active1, 0x802000000L, active2, 0L);
      case 80:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x18000L, active1, 0x80002000L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_1(active0, 0x400040000L, active1, 0x100020080000L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000002000L, active1, 0x80L, active2, 0x48000L);
      case 84:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x8001018008000000L, active1, 0x400000000000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_1(active0, 0x400000000000L, active1, 0x40000300000L, active2, 0L);
      case 87:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000000000200L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x284000L, active1, 0x4000000020L, active2, 0L);
      case 99:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x200004000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
         }
         break;
      case 101:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x3f0002801000400L, active1, 0xa004401810L, active2, 0L);
      case 104:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 3;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x800000800000L, active1, 0x1008004L, active2, 0L);
      case 108:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x100040500010L, active1, 0L, active2, 0L);
      case 109:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x20000000L, active1, 0x20000L, active2, 0L);
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x20000L, active1, 0x21000000000L, active2, 0L);
      case 111:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x100000100L, active1, 0x802000000L, active2, 0L);
      case 112:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x18000L, active1, 0x80002000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_1(active0, 0x400040000L, active1, 0x100020080000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000002000L, active1, 0x80L, active2, 0x48000L);
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x8001018008000000L, active1, 0x400000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x400000000000L, active1, 0x40000300000L, active2, 0L);
      case 118:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 3;
         }
         break;
      case 119:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000000000200L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_1(0, 3);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_1(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(0, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_1(active0, 0x40418000L, active1, 0x20000L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x4008000L, active2, 0L);
      case 69:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x8020162200L, active1, 0x80080L, active2, 0L);
      case 71:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x100L, active1, 0x10L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_1(active0, 0x8000000008000000L, active1, 0L, active2, 0x8000L);
      case 77:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 4;
         }
         break;
      case 78:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x800000800000L, active1, 0x2000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000004000000L, active1, 0x1080000000L, active2, 0L);
      case 80:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 82:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x380002100000000L, active1, 0x8000300000L, active2, 0L);
      case 83:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x20000000080000L, active1, 0x2001010000L, active2, 0L);
      case 84:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x311001004000L, active1, 0x4000000000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x2000L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa5_1(active0, 0x200000L, active1, 0L, active2, 0L);
      case 88:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
         }
         break;
      case 89:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x40418000L, active1, 0x20000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x4008000L, active2, 0L);
      case 101:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x8020162200L, active1, 0x80080L, active2, 0L);
      case 103:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x100L, active1, 0x10L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x8000000008000000L, active1, 0L, active2, 0x8000L);
      case 109:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 4;
         }
         break;
      case 110:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x800000800000L, active1, 0x2000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000004000000L, active1, 0x1080000000L, active2, 0L);
      case 112:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x380002100000000L, active1, 0x8000300000L, active2, 0L);
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x20000000080000L, active1, 0x2001010000L, active2, 0L);
      case 116:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x311001004000L, active1, 0x4000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x2000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_1(active0, 0x200000L, active1, 0L, active2, 0L);
      case 120:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
         }
         break;
      case 121:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_1(0, 4);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_1(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(0, 4);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa6_1(active0, 0x100138000L, active1, 0L, active2, 0L);
      case 68:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 69:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0x110000280300L, active1, 0L, active2, 0L);
      case 70:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 71:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 5;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa6_1(active0, 0x200040800000L, active1, 0L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa6_1(active0, 0x40000L, active1, 0L, active2, 0L);
      case 78:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0x810000202c000000L, active1, 0x200000L, active2, 0x8000L);
      case 79:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x10000L, active2, 0L);
      case 82:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0x1000000000400000L, active1, 0x80020010L, active2, 0L);
      case 83:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0x200000000000000L, active1, 0x80000L, active2, 0L);
      case 84:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 87:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 89:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 5;
         }
         break;
      case 99:
         return jjMoveStringLiteralDfa6_1(active0, 0x100138000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0x110000280300L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 103:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 5;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x200040800000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_1(active0, 0x40000L, active1, 0L, active2, 0L);
      case 110:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0x810000202c000000L, active1, 0x200000L, active2, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x10000L, active2, 0L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0x1000000000400000L, active1, 0x80020010L, active2, 0L);
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0x200000000000000L, active1, 0x80000L, active2, 0L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 121:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_1(0, 5);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_1(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_1(active0, 0x100002000040000L, active1, 0x82000000L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_1(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 68:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 6;
         }
         break;
      case 69:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_1(active0, 0x200000100000000L, active1, 0L, active2, 0L);
      case 71:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 6;
         }
         break;
      case 72:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 6;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa7_1(active0, 0x20000000000000L, active1, 0x1200000L, active2, 0L);
      case 78:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_1(active0, 0x4000100L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa7_1(active0, 0x200000000000L, active1, 0x10L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa7_1(active0, 0x200000L, active1, 0x10000L, active2, 0L);
      case 84:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_1(active0, 0x908000L, active1, 0L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa7_1(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 89:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0x100002000040000L, active1, 0x82000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 6;
         }
         break;
      case 101:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_1(active0, 0x200000100000000L, active1, 0L, active2, 0L);
      case 103:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 6;
         }
         break;
      case 104:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 6;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa7_1(active0, 0x20000000000000L, active1, 0x1200000L, active2, 0L);
      case 110:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_1(active0, 0x4000100L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0x200000000000L, active1, 0x10L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_1(active0, 0x200000L, active1, 0x10000L, active2, 0L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_1(active0, 0x908000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa7_1(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_1(0, 6);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_1(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(0, 6);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa8_1(active0, 0x200000000000000L, active1, 0L);
      case 68:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 7;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa8_1(active0, 0x4000100L, active1, 0x1000000L);
      case 73:
         return jjMoveStringLiteralDfa8_1(active0, 0x908000L, active1, 0L);
      case 76:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 7;
         }
         break;
      case 78:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x200000L);
      case 79:
         return jjMoveStringLiteralDfa8_1(active0, 0x20000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x82000000L);
      case 83:
         return jjMoveStringLiteralDfa8_1(active0, 0x200000L, active1, 0L);
      case 84:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_1(active0, 0x40000L, active1, 0x10000L);
      case 85:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa8_1(active0, 0x200000000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 7;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa8_1(active0, 0x4000100L, active1, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa8_1(active0, 0x908000L, active1, 0L);
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 7;
         }
         break;
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa8_1(active0, 0x20000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x82000000L);
      case 115:
         return jjMoveStringLiteralDfa8_1(active0, 0x200000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_1(active0, 0x40000L, active1, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjMoveNfa_1(0, 7);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_1(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(0, 7);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_1(active0, 0x4000000L, active1, 0L);
      case 69:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x10000L);
      case 71:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 8;
         }
         break;
      case 78:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 8;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa9_1(active0, 0x908000L, active1, 0L);
      case 80:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 8;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa9_1(active0, 0x100L, active1, 0L);
      case 83:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 8;
         }
         break;
      case 84:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 8;
         }
         break;
      case 89:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 8;
         }
         break;
      case 99:
         return jjMoveStringLiteralDfa9_1(active0, 0x4000000L, active1, 0L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x10000L);
      case 103:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 8;
         }
         break;
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 8;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa9_1(active0, 0x908000L, active1, 0L);
      case 112:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 8;
         }
         break;
      case 114:
         return jjMoveStringLiteralDfa9_1(active0, 0x100L, active1, 0L);
      case 115:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 8;
         }
         break;
      case 116:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 8;
         }
         break;
      case 121:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 8;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_1(0, 8);
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_1(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(0, 8);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_1(active0, 0x100L, active1, 0L);
      case 68:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 9;
         }
         break;
      case 78:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 9;
         }
         break;
      case 84:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 9;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa10_1(active0, 0x100L, active1, 0L);
      case 100:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 9;
         }
         break;
      case 110:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 9;
         }
         break;
      case 116:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 9;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_1(0, 9);
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_1(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(0, 9);
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa11_1(active0, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa11_1(active0, 0x100L);
      default :
         break;
   }
   return jjMoveNfa_1(0, 10);
}
private int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_1(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(0, 10);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa12_1(active0, 0x100L);
      case 101:
         return jjMoveStringLiteralDfa12_1(active0, 0x100L);
      default :
         break;
   }
   return jjMoveNfa_1(0, 11);
}
private int jjMoveStringLiteralDfa12_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_1(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(0, 11);
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 12;
         }
         break;
      case 100:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 12;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_1(0, 12);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 88;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(0, 9);
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAddStates(10, 14);
                  }
                  else if (curChar == 45)
                     jjAddStates(15, 16);
                  else if (curChar == 47)
                     jjAddStates(17, 18);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(58, 62);
                  else if (curChar == 39)
                     jjCheckNAddStates(19, 21);
                  else if (curChar == 34)
                     jjCheckNAddStates(22, 24);
                  else if (curChar == 36)
                  {
                     if (kind > 152)
                        kind = 152;
                  }
                  break;
               case 2:
                  jjCheckNAddStates(25, 27);
                  break;
               case 5:
                  if (curChar == 34)
                     jjCheckNAddStates(25, 27);
                  break;
               case 7:
                  if (curChar == 47)
                     jjCheckNAddStates(25, 27);
                  break;
               case 13:
               case 17:
                  if (curChar == 34)
                     jjCheckNAddStates(22, 24);
                  break;
               case 14:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 15:
                  if (curChar == 34 && kind > 154)
                     kind = 154;
                  break;
               case 19:
                  if (curChar == 47)
                     jjCheckNAddStates(22, 24);
                  break;
               case 25:
               case 29:
                  if (curChar == 39)
                     jjCheckNAddStates(19, 21);
                  break;
               case 26:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 27:
                  if (curChar == 39 && kind > 154)
                     kind = 154;
                  break;
               case 31:
                  if (curChar == 47)
                     jjCheckNAddStates(19, 21);
                  break;
               case 38:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAddStates(0, 9);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar == 46)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 45:
                  if (curChar == 45)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAdd(46);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if (curChar == 45)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if (curChar == 46)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 52);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  jjCheckNAdd(56);
                  break;
               case 57:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(58, 62);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAddTwoStates(58, 59);
                  break;
               case 60:
                  if (curChar == 45)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAdd(61);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(62, 52);
                  break;
               case 63:
                  if (curChar == 47)
                     jjAddStates(17, 18);
                  break;
               case 64:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 65:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 66:
                  if (curChar == 10 && kind > 169)
                     kind = 169;
                  break;
               case 67:
                  if (curChar != 47)
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjCheckNAddStates(28, 30);
                  break;
               case 68:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjCheckNAddStates(28, 30);
                  break;
               case 69:
                  if ((0x2400L & l) != 0L && kind > 170)
                     kind = 170;
                  break;
               case 70:
                  if (curChar == 10 && kind > 170)
                     kind = 170;
                  break;
               case 71:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 45)
                     jjAddStates(15, 16);
                  break;
               case 73:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(74, 75);
                  break;
               case 74:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(74, 75);
                  break;
               case 75:
                  if (curChar == 10 && kind > 171)
                     kind = 171;
                  break;
               case 76:
                  if (curChar != 45)
                     break;
                  if (kind > 172)
                     kind = 172;
                  jjCheckNAddStates(31, 33);
                  break;
               case 77:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  jjCheckNAddStates(31, 33);
                  break;
               case 78:
                  if ((0x2400L & l) != 0L && kind > 172)
                     kind = 172;
                  break;
               case 79:
                  if (curChar == 10 && kind > 172)
                     kind = 172;
                  break;
               case 80:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar != 35)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAddStates(10, 14);
                  break;
               case 82:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 83:
                  if (curChar == 10 && kind > 173)
                     kind = 173;
                  break;
               case 84:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAddStates(34, 36);
                  break;
               case 85:
                  if ((0x2400L & l) != 0L && kind > 174)
                     kind = 174;
                  break;
               case 86:
                  if (curChar == 10 && kind > 174)
                     kind = 174;
                  break;
               case 87:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(38);
                  }
                  else if (curChar == 96)
                     jjCheckNAddStates(25, 27);
                  else if (curChar == 95)
                  {
                     if (kind > 152)
                        kind = 152;
                  }
                  break;
               case 1:
                  if (curChar == 96)
                     jjCheckNAddStates(25, 27);
                  break;
               case 2:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 3:
                  if (curChar == 96 && kind > 153)
                     kind = 153;
                  break;
               case 4:
                  if (curChar == 92)
                     jjAddStates(37, 44);
                  break;
               case 6:
                  if (curChar == 92)
                     jjCheckNAddStates(25, 27);
                  break;
               case 8:
                  if (curChar == 98)
                     jjCheckNAddStates(25, 27);
                  break;
               case 9:
                  if (curChar == 102)
                     jjCheckNAddStates(25, 27);
                  break;
               case 10:
                  if (curChar == 110)
                     jjCheckNAddStates(25, 27);
                  break;
               case 11:
                  if (curChar == 114)
                     jjCheckNAddStates(25, 27);
                  break;
               case 12:
                  if (curChar == 116)
                     jjCheckNAddStates(25, 27);
                  break;
               case 14:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 16:
                  if (curChar == 92)
                     jjAddStates(45, 52);
                  break;
               case 18:
                  if (curChar == 92)
                     jjCheckNAddStates(22, 24);
                  break;
               case 20:
                  if (curChar == 98)
                     jjCheckNAddStates(22, 24);
                  break;
               case 21:
                  if (curChar == 102)
                     jjCheckNAddStates(22, 24);
                  break;
               case 22:
                  if (curChar == 110)
                     jjCheckNAddStates(22, 24);
                  break;
               case 23:
                  if (curChar == 114)
                     jjCheckNAddStates(22, 24);
                  break;
               case 24:
                  if (curChar == 116)
                     jjCheckNAddStates(22, 24);
                  break;
               case 26:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 28:
                  if (curChar == 92)
                     jjAddStates(53, 60);
                  break;
               case 30:
                  if (curChar == 92)
                     jjCheckNAddStates(19, 21);
                  break;
               case 32:
                  if (curChar == 98)
                     jjCheckNAddStates(19, 21);
                  break;
               case 33:
                  if (curChar == 102)
                     jjCheckNAddStates(19, 21);
                  break;
               case 34:
                  if (curChar == 110)
                     jjCheckNAddStates(19, 21);
                  break;
               case 35:
                  if (curChar == 114)
                     jjCheckNAddStates(19, 21);
                  break;
               case 36:
                  if (curChar == 116)
                     jjCheckNAddStates(19, 21);
                  break;
               case 37:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAdd(38);
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(61, 62);
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(63, 64);
                  break;
               case 52:
                  if ((0x4000000040L & l) != 0L && kind > 149)
                     kind = 149;
                  break;
               case 59:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(65, 66);
                  break;
               case 65:
                  jjAddStates(67, 68);
                  break;
               case 68:
                  if (kind > 170)
                     kind = 170;
                  jjAddStates(28, 30);
                  break;
               case 74:
                  jjAddStates(69, 70);
                  break;
               case 77:
                  if (kind > 172)
                     kind = 172;
                  jjAddStates(31, 33);
                  break;
               case 82:
                  jjAddStates(71, 72);
                  break;
               case 84:
                  if (kind > 174)
                     kind = 174;
                  jjAddStates(34, 36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(25, 27);
                  break;
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(22, 24);
                  break;
               case 26:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(19, 21);
                  break;
               case 65:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(67, 68);
                  break;
               case 68:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjAddStates(28, 30);
                  break;
               case 74:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(69, 70);
                  break;
               case 77:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 172)
                     kind = 172;
                  jjAddStates(31, 33);
                  break;
               case 82:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(71, 72);
                  break;
               case 84:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjAddStates(34, 36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 88 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x4000000000000L);
      case 47:
         return jjMoveStringLiteralDfa1_2(0x2000000000000L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 177);
         break;
      case 47:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 178);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, 0L, 0L, active2);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar != 43)
                     break;
                  if (kind > 176)
                     kind = 176;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if (curChar != 32)
                     break;
                  if (kind > 176)
                     kind = 176;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if ((0xfffffbffffffffffL & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  kind = 176;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 176)
                     kind = 176;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   40, 41, 42, 47, 48, 51, 52, 53, 54, 56, 82, 83, 84, 85, 87, 73, 
   76, 64, 67, 26, 27, 28, 14, 15, 16, 2, 3, 4, 68, 69, 71, 77, 
   78, 80, 84, 85, 87, 5, 6, 7, 8, 9, 10, 11, 12, 17, 18, 19, 
   20, 21, 22, 23, 24, 29, 30, 31, 32, 33, 34, 35, 36, 45, 46, 49, 
   50, 60, 61, 65, 66, 74, 75, 82, 83, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\136", "\174\174", "\57", "\151\144\151\166", "\55", "\45", "\52", "\53", "\50", 
"\51", "\133", "\135", "\100", "\72", "\54", "\56", "\77", "\73", "\43", "\74", 
"\76", "\74\75", "\76\75", "\75", "\41\75", "\74\76", "\176\75", "\173", "\175", 
"\173\173", "\175\175", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_DBL_BRACE",
   "INSIDE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   2, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x100777ffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x0L, 0xfffe000000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x1000000000000L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[88];
private final int[] jjstateSet = new int[176];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public SQLPPParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public SQLPPParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 88; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos == 0 && jjmatchedKind > 179)
       {
          jjmatchedKind = 179;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 175 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
             pushState();
         break;
      case 177 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
             pushState();
         break;
      case 178 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
             popState("*/");
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 138 :
        image.append(jjstrLiteralImages[138]);
        lengthOfMatch = jjstrLiteralImages[138].length();
                        pushState();
         break;
      case 139 :
        image.append(jjstrLiteralImages[139]);
        lengthOfMatch = jjstrLiteralImages[139].length();
                         popState("}");
         break;
      case 140 :
        image.append(jjstrLiteralImages[140]);
        lengthOfMatch = jjstrLiteralImages[140].length();
                            pushState();
         break;
      case 141 :
        image.append(jjstrLiteralImages[141]);
        lengthOfMatch = jjstrLiteralImages[141].length();
                             popState("}}");
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}

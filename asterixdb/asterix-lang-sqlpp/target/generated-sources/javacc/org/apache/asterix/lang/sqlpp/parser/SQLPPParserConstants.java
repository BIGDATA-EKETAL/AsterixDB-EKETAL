/* Generated By:JavaCC: Do not edit this line. SQLPPParserConstants.java */
package org.apache.asterix.lang.sqlpp.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SQLPPParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ALL = 1;
  /** RegularExpression Id. */
  int AND = 2;
  /** RegularExpression Id. */
  int ANY = 3;
  /** RegularExpression Id. */
  int APPLY = 4;
  /** RegularExpression Id. */
  int AS = 5;
  /** RegularExpression Id. */
  int ASC = 6;
  /** RegularExpression Id. */
  int AT = 7;
  /** RegularExpression Id. */
  int AUTOGENERATED = 8;
  /** RegularExpression Id. */
  int BETWEEN = 9;
  /** RegularExpression Id. */
  int BTREE = 10;
  /** RegularExpression Id. */
  int BY = 11;
  /** RegularExpression Id. */
  int CASE = 12;
  /** RegularExpression Id. */
  int CLOSED = 13;
  /** RegularExpression Id. */
  int CREATE = 14;
  /** RegularExpression Id. */
  int COMPACTION = 15;
  /** RegularExpression Id. */
  int COMPACT = 16;
  /** RegularExpression Id. */
  int CONNECT = 17;
  /** RegularExpression Id. */
  int CORRELATE = 18;
  /** RegularExpression Id. */
  int DATASET = 19;
  /** RegularExpression Id. */
  int COLLECTION = 20;
  /** RegularExpression Id. */
  int DATAVERSE = 21;
  /** RegularExpression Id. */
  int DECLARE = 22;
  /** RegularExpression Id. */
  int DEFINITION = 23;
  /** RegularExpression Id. */
  int DELETE = 24;
  /** RegularExpression Id. */
  int DESC = 25;
  /** RegularExpression Id. */
  int DISCONNECT = 26;
  /** RegularExpression Id. */
  int DISTINCT = 27;
  /** RegularExpression Id. */
  int DROP = 28;
  /** RegularExpression Id. */
  int ELEMENT = 29;
  /** RegularExpression Id. */
  int EXPLAIN = 30;
  /** RegularExpression Id. */
  int ELSE = 31;
  /** RegularExpression Id. */
  int ENFORCED = 32;
  /** RegularExpression Id. */
  int END = 33;
  /** RegularExpression Id. */
  int EVERY = 34;
  /** RegularExpression Id. */
  int EXCEPT = 35;
  /** RegularExpression Id. */
  int EXISTS = 36;
  /** RegularExpression Id. */
  int EXTERNAL = 37;
  /** RegularExpression Id. */
  int FEED = 38;
  /** RegularExpression Id. */
  int FILTER = 39;
  /** RegularExpression Id. */
  int FLATTEN = 40;
  /** RegularExpression Id. */
  int FOR = 41;
  /** RegularExpression Id. */
  int FROM = 42;
  /** RegularExpression Id. */
  int FULL = 43;
  /** RegularExpression Id. */
  int FULLTEXT = 44;
  /** RegularExpression Id. */
  int FUNCTION = 45;
  /** RegularExpression Id. */
  int GROUP = 46;
  /** RegularExpression Id. */
  int HAVING = 47;
  /** RegularExpression Id. */
  int HINTS = 48;
  /** RegularExpression Id. */
  int IF = 49;
  /** RegularExpression Id. */
  int INTO = 50;
  /** RegularExpression Id. */
  int IN = 51;
  /** RegularExpression Id. */
  int INDEX = 52;
  /** RegularExpression Id. */
  int INGESTION = 53;
  /** RegularExpression Id. */
  int INNER = 54;
  /** RegularExpression Id. */
  int INSERT = 55;
  /** RegularExpression Id. */
  int INTERNAL = 56;
  /** RegularExpression Id. */
  int INTERSECT = 57;
  /** RegularExpression Id. */
  int IS = 58;
  /** RegularExpression Id. */
  int JOIN = 59;
  /** RegularExpression Id. */
  int KEYWORD = 60;
  /** RegularExpression Id. */
  int KEY = 61;
  /** RegularExpression Id. */
  int LEFT = 62;
  /** RegularExpression Id. */
  int LETTING = 63;
  /** RegularExpression Id. */
  int LET = 64;
  /** RegularExpression Id. */
  int LIKE = 65;
  /** RegularExpression Id. */
  int LIMIT = 66;
  /** RegularExpression Id. */
  int LOAD = 67;
  /** RegularExpression Id. */
  int NODEGROUP = 68;
  /** RegularExpression Id. */
  int NGRAM = 69;
  /** RegularExpression Id. */
  int NOT = 70;
  /** RegularExpression Id. */
  int OFFSET = 71;
  /** RegularExpression Id. */
  int ON = 72;
  /** RegularExpression Id. */
  int OPEN = 73;
  /** RegularExpression Id. */
  int OR = 74;
  /** RegularExpression Id. */
  int ORDER = 75;
  /** RegularExpression Id. */
  int OUTER = 76;
  /** RegularExpression Id. */
  int OUTPUT = 77;
  /** RegularExpression Id. */
  int PATH = 78;
  /** RegularExpression Id. */
  int POLICY = 79;
  /** RegularExpression Id. */
  int PRESORTED = 80;
  /** RegularExpression Id. */
  int PRIMARY = 81;
  /** RegularExpression Id. */
  int RAW = 82;
  /** RegularExpression Id. */
  int REFRESH = 83;
  /** RegularExpression Id. */
  int RETURN = 84;
  /** RegularExpression Id. */
  int RETURNING = 85;
  /** RegularExpression Id. */
  int RTREE = 86;
  /** RegularExpression Id. */
  int RUN = 87;
  /** RegularExpression Id. */
  int SATISFIES = 88;
  /** RegularExpression Id. */
  int SECONDARY = 89;
  /** RegularExpression Id. */
  int SELECT = 90;
  /** RegularExpression Id. */
  int SET = 91;
  /** RegularExpression Id. */
  int SOME = 92;
  /** RegularExpression Id. */
  int START = 93;
  /** RegularExpression Id. */
  int STOP = 94;
  /** RegularExpression Id. */
  int TEMPORARY = 95;
  /** RegularExpression Id. */
  int THEN = 96;
  /** RegularExpression Id. */
  int TYPE = 97;
  /** RegularExpression Id. */
  int TO = 98;
  /** RegularExpression Id. */
  int UNION = 99;
  /** RegularExpression Id. */
  int UNKOWN = 100;
  /** RegularExpression Id. */
  int UNNEST = 101;
  /** RegularExpression Id. */
  int UPDATE = 102;
  /** RegularExpression Id. */
  int UPSERT = 103;
  /** RegularExpression Id. */
  int USE = 104;
  /** RegularExpression Id. */
  int USING = 105;
  /** RegularExpression Id. */
  int VALUE = 106;
  /** RegularExpression Id. */
  int WHEN = 107;
  /** RegularExpression Id. */
  int WHERE = 108;
  /** RegularExpression Id. */
  int WITH = 109;
  /** RegularExpression Id. */
  int WRITE = 110;
  /** RegularExpression Id. */
  int CARET = 111;
  /** RegularExpression Id. */
  int CONCAT = 112;
  /** RegularExpression Id. */
  int DIV = 113;
  /** RegularExpression Id. */
  int IDIV = 114;
  /** RegularExpression Id. */
  int MINUS = 115;
  /** RegularExpression Id. */
  int MOD = 116;
  /** RegularExpression Id. */
  int MUL = 117;
  /** RegularExpression Id. */
  int PLUS = 118;
  /** RegularExpression Id. */
  int LEFTPAREN = 119;
  /** RegularExpression Id. */
  int RIGHTPAREN = 120;
  /** RegularExpression Id. */
  int LEFTBRACKET = 121;
  /** RegularExpression Id. */
  int RIGHTBRACKET = 122;
  /** RegularExpression Id. */
  int ATT = 123;
  /** RegularExpression Id. */
  int COLON = 124;
  /** RegularExpression Id. */
  int COMMA = 125;
  /** RegularExpression Id. */
  int DOT = 126;
  /** RegularExpression Id. */
  int QUES = 127;
  /** RegularExpression Id. */
  int SEMICOLON = 128;
  /** RegularExpression Id. */
  int SHARP = 129;
  /** RegularExpression Id. */
  int LT = 130;
  /** RegularExpression Id. */
  int GT = 131;
  /** RegularExpression Id. */
  int LE = 132;
  /** RegularExpression Id. */
  int GE = 133;
  /** RegularExpression Id. */
  int EQ = 134;
  /** RegularExpression Id. */
  int NE = 135;
  /** RegularExpression Id. */
  int LG = 136;
  /** RegularExpression Id. */
  int SIMILAR = 137;
  /** RegularExpression Id. */
  int LEFTBRACE = 138;
  /** RegularExpression Id. */
  int RIGHTBRACE = 139;
  /** RegularExpression Id. */
  int LEFTDBLBRACE = 140;
  /** RegularExpression Id. */
  int RIGHTDBLBRACE = 141;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 142;
  /** RegularExpression Id. */
  int MISSING = 143;
  /** RegularExpression Id. */
  int NULL = 144;
  /** RegularExpression Id. */
  int TRUE = 145;
  /** RegularExpression Id. */
  int FALSE = 146;
  /** RegularExpression Id. */
  int DIGIT = 147;
  /** RegularExpression Id. */
  int DOUBLE_LITERAL = 148;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 149;
  /** RegularExpression Id. */
  int DIGITS = 150;
  /** RegularExpression Id. */
  int LETTER = 151;
  /** RegularExpression Id. */
  int SPECIALCHARS = 152;
  /** RegularExpression Id. */
  int QUOTED_STRING = 153;
  /** RegularExpression Id. */
  int STRING_LITERAL = 154;
  /** RegularExpression Id. */
  int EscapeQuot = 155;
  /** RegularExpression Id. */
  int EscapeApos = 156;
  /** RegularExpression Id. */
  int EscapeBslash = 157;
  /** RegularExpression Id. */
  int EscapeSlash = 158;
  /** RegularExpression Id. */
  int EscapeBspace = 159;
  /** RegularExpression Id. */
  int EscapeFormf = 160;
  /** RegularExpression Id. */
  int EscapeNl = 161;
  /** RegularExpression Id. */
  int EscapeCr = 162;
  /** RegularExpression Id. */
  int EscapeTab = 163;
  /** RegularExpression Id. */
  int IDENTIFIER = 164;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_DBL_BRACE = 1;
  /** Lexical state. */
  int INSIDE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"all\"",
    "\"and\"",
    "\"any\"",
    "\"apply\"",
    "\"as\"",
    "\"asc\"",
    "\"at\"",
    "\"autogenerated\"",
    "\"between\"",
    "\"btree\"",
    "\"by\"",
    "\"case\"",
    "\"closed\"",
    "\"create\"",
    "\"compaction\"",
    "\"compact\"",
    "\"connect\"",
    "\"correlate\"",
    "\"dataset\"",
    "\"collection\"",
    "\"dataverse\"",
    "\"declare\"",
    "\"definition\"",
    "\"delete\"",
    "\"desc\"",
    "\"disconnect\"",
    "\"distinct\"",
    "\"drop\"",
    "\"element\"",
    "\"explain\"",
    "\"else\"",
    "\"enforced\"",
    "\"end\"",
    "\"every\"",
    "\"except\"",
    "\"exists\"",
    "\"external\"",
    "\"feed\"",
    "\"filter\"",
    "\"flatten\"",
    "\"for\"",
    "\"from\"",
    "\"full\"",
    "\"fulltext\"",
    "\"function\"",
    "\"group\"",
    "\"having\"",
    "\"hints\"",
    "\"if\"",
    "\"into\"",
    "\"in\"",
    "\"index\"",
    "\"ingestion\"",
    "\"inner\"",
    "\"insert\"",
    "\"internal\"",
    "\"intersect\"",
    "\"is\"",
    "\"join\"",
    "\"keyword\"",
    "\"key\"",
    "\"left\"",
    "\"letting\"",
    "\"let\"",
    "\"like\"",
    "\"limit\"",
    "\"load\"",
    "\"nodegroup\"",
    "\"ngram\"",
    "\"not\"",
    "\"offset\"",
    "\"on\"",
    "\"open\"",
    "\"or\"",
    "\"order\"",
    "\"outer\"",
    "\"output\"",
    "\"path\"",
    "\"policy\"",
    "\"pre-sorted\"",
    "\"primary\"",
    "\"raw\"",
    "\"refresh\"",
    "\"return\"",
    "\"returning\"",
    "\"rtree\"",
    "\"run\"",
    "\"satisfies\"",
    "\"secondary\"",
    "\"select\"",
    "\"set\"",
    "\"some\"",
    "\"start\"",
    "\"stop\"",
    "\"temporary\"",
    "\"then\"",
    "\"type\"",
    "\"to\"",
    "\"union\"",
    "\"unknown\"",
    "\"unnest\"",
    "\"update\"",
    "\"upsert\"",
    "\"use\"",
    "\"using\"",
    "\"value\"",
    "\"when\"",
    "\"where\"",
    "\"with\"",
    "\"write\"",
    "\"^\"",
    "\"||\"",
    "\"/\"",
    "\"idiv\"",
    "\"-\"",
    "\"%\"",
    "\"*\"",
    "\"+\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"@\"",
    "\":\"",
    "\",\"",
    "\".\"",
    "\"?\"",
    "\";\"",
    "\"#\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"=\"",
    "\"!=\"",
    "\"<>\"",
    "\"~=\"",
    "\"{\"",
    "\"}\"",
    "\"{{\"",
    "\"}}\"",
    "<INTEGER_LITERAL>",
    "\"missing\"",
    "\"null\"",
    "\"true\"",
    "\"false\"",
    "<DIGIT>",
    "<DOUBLE_LITERAL>",
    "<FLOAT_LITERAL>",
    "<DIGITS>",
    "<LETTER>",
    "<SPECIALCHARS>",
    "<QUOTED_STRING>",
    "<STRING_LITERAL>",
    "\"\\\\\\\"\"",
    "\"\\\\\\\'\"",
    "\"\\\\\\\\\"",
    "\"\\\\/\"",
    "\"\\\\b\"",
    "\"\\\\f\"",
    "\"\\\\n\"",
    "\"\\\\r\"",
    "\"\\\\t\"",
    "<IDENTIFIER>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 169>",
    "<token of kind 170>",
    "<token of kind 171>",
    "<token of kind 172>",
    "<token of kind 173>",
    "<token of kind 174>",
    "\"/*\"",
    "<token of kind 176>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 179>",
  };

}
